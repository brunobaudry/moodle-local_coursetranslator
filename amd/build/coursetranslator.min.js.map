{"version":3,"file":"coursetranslator.min.js","sources":["../src/coursetranslator.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @module     local_coursetranslator/coursetranslator\n * @copyright  2022 Kaleb Heitzman <kaleb@jamfire.io>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n// import libs\nimport ajax from \"core/ajax\";\nimport Selectors from \"./selectors\";\nimport Modal from 'core/modal';\n// Initialize the temporary translations dictionary @todo make external class\nlet tempTranslations = {};\nlet editorType = '';\nlet config = {};\nlet autotranslateButton = {};\nlet checkboxes = [];\n\nconst registerEventListeners = () => {\n\n    document.addEventListener('change', e => {\n        if (e.target.closest(Selectors.actions.targetSwitcher)) {\n            switchTarget(e);\n        }\n        if (e.target.closest(Selectors.actions.sourceSwitcher)) {\n            switchSource(e);\n        }\n        if (e.target.closest(Selectors.actions.showUpdated)) {\n            showRows(Selectors.statuses.updated, e.target.checked);\n        }\n        if (e.target.closest(Selectors.actions.showNeedUpdate)) {\n            //neededUpdate(e);\n            showRows(Selectors.statuses.needsupdate, e.target.checked);\n        }\n        if (e.target.closest(Selectors.actions.checkBoxes)) {\n            onItemChecked(e);\n        }\n    });\n    document.addEventListener('click', e => {\n        if (e.target.closest(Selectors.actions.toggleMultilang)) {\n            //window.console.info(e.target.id);\n            onToggleMultilang(e.target.closest(Selectors.actions.toggleMultilang));\n        }\n        if (e.target.closest(Selectors.actions.autoTranslateBtn)) {\n            if (config.currentlang == config.lang || config.lang == undefined) {\n                Modal.create({\n                    title: 'Cannot call deepl',\n                    body: `<p>Both languges are the same {$config.lang}</p>`,\n                    show: true,\n                    removeOnClose: true,\n                });\n            } else {\n                doAutotranslate(e);\n            }\n        }\n        if (e.target.closest(Selectors.actions.selectAllBtn)) {\n            toggleAllCheckboxes(e);\n        }\n    });\n\n};\nconst registerUI = () => {\n    autotranslateButton = document.querySelector(Selectors.actions.autoTranslateBtn);\n    checkboxes = document.querySelectorAll(Selectors.actions.checkBoxes);\n};\n\n/**\n * Translation Editor UI\n * @param {Object} cfg JS Config\n */\nexport const init = (cfg) => {\n    config = cfg;\n    //window.console.log(config);\n    editorType = config.userPrefs;\n    // setup\n    registerUI();\n    registerEventListeners();\n    toggleAutotranslateButton();\n    const selectAllBtn = document.querySelector(Selectors.actions.selecAllBtn);\n    if (config.autotranslate) {\n        selectAllBtn.disabled = false;\n    }\n    /**\n     * Validaate translation ck\n     */\n    const validators = document.querySelectorAll(Selectors.actions.validatorsBtns);\n    validators.forEach((e) => {\n        // Get the stored data and do the saving from editors content\n        e.addEventListener('click', (e) => {\n            let key = e.target.parentElement.dataset.keyValidator;\n            if (tempTranslations[key] === null || tempTranslations[key] === undefined) {\n                /**\n                 * @todo do a UI feedback (disable save )\n                 */\n                window.console.log(`Transaltion key \"${key}\" is undefined `);\n            } else {\n                saveTranslation(\n                    key,\n                    tempTranslations[key].editor,\n                    tempTranslations[key].editor.innerHTML\n                );\n            }\n\n        });\n    });\n\n    /**\n     * Autotranslate Checkboxes\n     */\n    if (config.autotranslate) {\n        checkboxes.forEach((e) => {\n            e.disabled = false;\n        });\n    }\n    checkboxes.forEach((e) => {\n        e.addEventListener(\"change\", () => {\n            toggleAutotranslateButton();\n        });\n    });\n\n\n    /**\n     * Save Translation to Moodle\n     * @param  {String} key Data Key\n     * @param  {Node} editor HTML Editor Node\n     * @param  {String} text Updated Text\n     * @todo 3rd param is to refactor remove as it is the editors content\n     */\n    const saveTranslation = (key, editor, text) => {\n        // Get processing vars\n        let icon = document.querySelector(replaceKey(Selectors.actions.validatorIcon, key));\n        let selector = Selectors.editors.multiples.editorsWithKey.replace(\"<KEY>\", key);\n        let element = document.querySelector(selector);\n        let id = element.getAttribute(\"data-id\");\n        let tid = element.getAttribute(\"data-tid\");\n        let table = element.getAttribute(\"data-table\");\n        let field = element.getAttribute(\"data-field\");\n\n        // Get the latest field data\n        let fielddata = {};\n        fielddata.courseid = config.courseid;\n        fielddata.id = parseInt(id);\n        fielddata.table = table;\n        fielddata.field = field;\n\n        // Get the latest data to parse text against.\n        ajax.call([\n            {\n                methodname: \"local_coursetranslator_get_field\",\n                args: {\n                    data: [fielddata],\n                },\n                done: (data) => {\n                    // The latests field text so multiple translators can work at the same time\n                    let fieldtext = data[0].text;\n\n                    // Field text exists\n                    if (data.length > 0) {\n                        // Updated hidden textarea with updatedtext\n                        let textarea = document.querySelector(\n                            Selectors.editors.multiples.textAreas\n                                .replace(\"<KEY>\", key));\n                        // Get the updated text\n                        let updatedtext = getupdatedtext(fieldtext, text);\n\n                        // Build the data object\n                        let tdata = {};\n                        tdata.courseid = config.courseid;\n                        tdata.id = parseInt(id);\n                        tdata.tid = tid;\n                        tdata.table = table;\n                        tdata.field = field;\n                        tdata.text = updatedtext;\n                        // Success Message\n                        const successMessage = () => {\n                            // editor.classList.add(\"local-coursetranslator__success\");\n                            element.classList.add(\"local-coursetranslator__success\");\n                            // Add saved indicator\n                            icon.setAttribute('role', 'status');\n                            icon.setAttribute('data-status', \"local-coursetranslator/success\");\n                            // Remove success message after a few seconds\n                            setTimeout(() => {\n                                icon.setAttribute('data-status', \"local-coursetranslator/saved\");\n                            });\n                        };\n\n                        // Error Mesage\n                        const errorMessage = (error) => {\n                            editor.classList.add(\"local-coursetranslator__error\");\n                            icon.setAttribute('role', 'status');\n                            icon.setAttribute('data-status', \"local-coursetranslator/failed\");\n                            if (error) {\n                                textarea.innerHTML = error;\n                            }\n                        };\n\n                        // Submit the request\n                        ajax.call([\n                            {\n                                methodname: \"local_coursetranslator_update_translation\",\n                                args: {\n                                    data: [tdata],\n                                },\n                                done: (data) => {\n                                    // Print response to console log\n                                    if (config.debug > 0) {\n                                        window.console.log(\"ws: \", key, data);\n                                    }\n\n                                    // Display success message\n                                    if (data.length > 0) {\n                                        successMessage();\n                                        textarea.innerHTML = data[0].text;\n\n                                        // Update source lang if necessary\n                                        if (config.currentlang === config.lang) {\n                                            document.querySelector(Selectors.sourcetexts.keys.replace('<KEY>', key))\n                                                .innerHTML = text;\n                                        }\n                                    } else {\n                                        // Something went wrong with the data\n                                        errorMessage();\n                                    }\n                                },\n                                fail: (error) => {\n                                    // An error occurred\n                                    errorMessage(error);\n                                },\n                            },\n                        ]);\n                    } else {\n                        // Something went wrong with field retrieval\n                        window.console.log(data);\n                    }\n                },\n                fail: (error) => {\n                    // An error occurred\n                    window.console.log(error);\n                },\n            },\n        ]);\n    };\n\n    /**\n     * Update Textarea\n     * @param {string} fieldtext Latest text from database\n     * @param {string} text Text to update\n     * @returns {string}\n     */\n    const getupdatedtext = (fieldtext, text) => {\n        let lang = config.lang;\n\n        // Search for {mlang} not found.\n        let mlangtext = `{mlang ${lang}}${text}{mlang}`;\n\n        // Return new mlang text if mlang has not been used before\n        if (fieldtext.indexOf(\"{mlang\") === -1) {\n            if (lang === \"other\") {\n                return mlangtext;\n            } else {\n                return (\n                    `{mlang other} ${fieldtext} {mlang}{mlang ${lang}} ${text} {mlang}`\n                );\n            }\n        }\n\n        // Use regex to replace the string\n        let pattern = `{*mlang +(${lang})}(.*?){*mlang*}`;\n        let replacex = new RegExp(pattern, \"dgis\");\n        let matches = fieldtext.match(replacex);\n\n        // Return the updated string\n        const updatedString = `{mlang ${lang}} ${text} {mlang}`;\n        if (matches) {\n            return fieldtext.replace(replacex, updatedString);\n        } else {\n            return fieldtext + updatedString;\n        }\n    };\n};\n\nconst onItemChecked = (e) => {\n    toggleStatus(e.target.getAttribute('data-key'), e.target.checked);\n};\nconst toggleStatus = (key, checked) => {\n    let s = 'wait';\n    if (checked) {\n        s = \"totranslate\";\n    }\n    document.querySelector(replaceKey(Selectors.actions.validatorIcon, key))\n        .setAttribute('data-status', `local-coursetranslator/${s}`);\n};\n\n\n/**\n * shows/hides rows\n * @param {string} selector\n * @param {boolean} selected\n */\nconst showRows = (selector, selected) => {\n    let items = document.querySelectorAll(selector);\n    items.forEach((item) => {\n        let k = item.getAttribute('data-row-id');\n        toggleRowVisibility(item, selected);\n        // when a row is toggled then we don't want it to be selected and sent from translation.\n        item.querySelector(replaceKey(Selectors.editors.multiples.checkBoxesWithKey, k)).checked = false;\n        toggleStatus(k, false);\n    });\n};\nconst toggleRowVisibility = (row, checked) => {\n    if (checked) {\n        row.classList.remove(\"d-none\");\n    } else {\n        row.classList.add(\"d-none\");\n    }\n};\n/**\n * Event listener to switch target lang\n * @param {Event} e\n */\nconst switchTarget = (e) => {\n    let url = new URL(window.location.href);\n    let searchParams = url.searchParams;\n    searchParams.set(\"target_lang\", e.target.value);\n    let newUrl = url.toString();\n    window.location = newUrl;\n};\n/**\n * Event listener to switch source lang\n * Hence reload the page and change the site main lang\n * @param {Event} e\n */\nconst switchSource = (e) => {\n    let url = new URL(window.location.href);\n    let searchParams = url.searchParams;\n    searchParams.set(\"lang\", e.target.value);\n    let newUrl = url.toString();\n    window.location = newUrl;\n};\n/**\n * Launch autotranslation\n */\nconst doAutotranslate = () => {\n    document\n        // .querySelectorAll(\".local-coursetranslator__checkbox:checked\")\n        .querySelectorAll(Selectors.statuses.checkedCheckBoxes)\n        .forEach((ckBox) => {\n            let key = ckBox.getAttribute(\"data-key\");\n            getTranslation(key);\n        });\n};\n/**\n * @todo extract images ALT tags to send for translation\n * Send for Translation to DeepL\n * @param {Integer} key Translation Key\n */\nconst getTranslation = (key) => {\n    // Store the key in the dictionary\n    tempTranslations[key] = {};\n    // Get the editor\n    let editor = findEditor(key);\n    // Prepare css to inject in iframe editors\n    const css = document.createElement('style');\n    css.textContent = 'img{background-color:yellow !important;font-style: italic;}';\n    // Get the source text\n    let sourceText = document.querySelector(Selectors.sourcetexts.keys.replace(\"<KEY>\", key)).getAttribute(\"data-sourcetext-raw\");\n    let icon = document.querySelector(replaceKey(Selectors.actions.validatorIcon, key));\n    // Initialize global dictionary with this key's editor\n    tempTranslations[key] = {\n        'editor': editor,\n        'source': sourceText,\n        'translation': ''\n    };\n    // Build formData\n    let formData = new FormData();\n    formData.append(\"text\", sourceText);\n    // FormData.append(\"source_lang\", \"en\");\n    formData.append(\"source_lang\", config.currentlang.toUpperCase());\n    formData.append(\"target_lang\", config.lang.toUpperCase());\n    formData.append(\"auth_key\", config.apikey);\n    formData.append(\"tag_handling\", document.querySelector(Selectors.deepl.tagHandling).checked ? 'html' : 'xml');//\n    formData.append(\"context\", document.querySelector(Selectors.deepl.context).value ?? null); //\n    formData.append(\"split_sentences\", document.querySelector(Selectors.deepl.splitSentences).value);//\n    formData.append(\"preserve_formatting\", document.querySelector(Selectors.deepl.preserveFormatting).checked);//\n    formData.append(\"formality\", document.querySelector('[name=\"local-coursetranslator/formality\"]:checked').value);\n    formData.append(\"glossary_id\", document.querySelector(Selectors.deepl.glossaryId).value);//\n    formData.append(\"outline_detection\", document.querySelector(Selectors.deepl.outlineDetection).checked);//\n    formData.append(\"non_splitting_tags\", toJsonArray(document.querySelector(Selectors.deepl.nonSplittingTags).value));\n    formData.append(\"splitting_tags\", toJsonArray(document.querySelector(Selectors.deepl.splittingTags).value));\n    formData.append(\"ignore_tags\", toJsonArray(document.querySelector(Selectors.deepl.ignoreTags).value));\n    // window.console.log(\"Send deepl:\", formData);\n    // Update the translation\n    let xhr = new XMLHttpRequest();\n    xhr.onreadystatechange = () => {\n        if (xhr.readyState === XMLHttpRequest.DONE) {\n            const status = xhr.status;\n            if (status === 0 || (status >= 200 && status < 400)) {\n                // The request has been completed successfully\n                let data = JSON.parse(xhr.responseText);\n                //window.console.log(\"deepl:\", key, data);\n                // Display translation\n                editor.innerHTML = data.translations[0].text;\n                // store the translation in the global object\n                tempTranslations[key].translation = data.translations[0].text;\n                icon.setAttribute('role', 'button');\n                icon.setAttribute('data-status', 'local-coursetranslator/tosave');\n                // Inject css to highlight ALT text of image not loaded because of @@POLUGINFILE@@\n                editor.appendChild(css);\n            } else {\n                // Oh no! There has been an error with the request!\n                icon.setAttribute('data-status', 'local-coursetranslator/failed');\n                icon.setAttribute('role', 'status');\n            }\n        }\n    };\n    xhr.open(\"POST\", config.deeplurl);\n    xhr.send(formData);\n};\n/**\n * Get the editor container based on recieved current user's\n * editor preference.\n * @param {Integer} key Translation Key\n */\nconst findEditor = (key) => {\n    let e = document.querySelector(Selectors.editors.types.basic\n        .replace(\"<KEY>\", key));\n    if (e === null) {\n        switch (editorType) {\n            case \"atto\" :\n                e = document.querySelector(\n                    Selectors.editors.types.atto\n                        .replaceAll(\"<KEY>\", key));\n                break;\n            case \"tiny\":\n                e = document.querySelector(Selectors.editors.types.tiny\n                    .replaceAll(\"<KEY>\", key))\n                    .contentWindow.tinymce;\n                break;\n            case 'marklar':\n            case \"textarea\" :\n                e = document.querySelector(Selectors.editors.types.other\n                    .replaceAll(\"<KEY>\", key));\n                break;\n        }\n    }\n    return e;\n};\n/**\n * toggle checkboxes\n * @param {Event} e Event\n */\nconst toggleAllCheckboxes = (e) => {\n    // Check/uncheck checkboxes\n    if (e.target.checked) {\n        checkboxes.forEach((i) => {\n            // toggle check box upon visibility\n            i.checked = !getParentRow(i).classList.contains('d-none');\n            toggleStatus(i.getAttribute('data-key'), i.checked);\n        });\n    } else {\n        checkboxes.forEach((i) => {\n            i.checked = false;\n            toggleStatus(i.getAttribute('data-key'), false);\n        });\n    }\n    toggleAutotranslateButton();\n};\nconst getParentRow = (node) => {\n    return node.closest(replaceKey(Selectors.sourcetexts.parentrow, node.getAttribute('data-key')));\n};\n/**\n * Toggle Autotranslate Button\n * @todo add real autotranslate functionality\n */\nconst toggleAutotranslateButton = () => {\n    let checkboxItems = [];\n    checkboxes.forEach((e) => {\n        checkboxItems.push(e.checked);\n    });\n    let checked = checkboxItems.find((checked) => checked === true)\n        ? true\n        : false;\n    if (config.autotranslate && checked) {\n        autotranslateButton.disabled = false;\n    } else {\n        autotranslateButton.disabled = true;\n    }\n};\n/**\n * Multilang button handler\n * @param {Event} e Event\n */\nconst onToggleMultilang = (e) => {\n    e.classList.toggle(\"showing\");\n    let keyid = e.getAttribute('aria-controls');\n    let key = keyidToKey(keyid);\n    //window.console.log(e, key, keyid);\n    let source = document.querySelector(replaceKey(Selectors.sourcetexts.keys, key));\n    let multilang = document.querySelector(replaceKey(Selectors.sourcetexts.multilangs, keyid));\n    source.classList.toggle(\"show\");\n    multilang.classList.toggle(\"show\");\n};\n/**\n * Json helper\n * @param {string} s\n * @param {string} sep\n * @returns {string}\n */\nconst toJsonArray = (s, sep = \",\") => {\n    return JSON.stringify(s.split(sep));\n};\n/**\n * simple helper to manage selectors\n * @param {string} s\n * @param {string} k\n * @returns {*}\n */\nconst replaceKey = (s, k) => {\n    return s.replace(\"<KEY>\", k);\n};\n/*const regFrom = /^(.+)\\[(.+)\\]\\[(.+)\\]$/i;*/\n//const regTo = /^(.+)-(.+)-(.+)$/i;\n/**\n * transforms a keyid to a key\n * @param {string} k\n * @returns {`${*}[${*}][${*}]`}\n */\nconst keyidToKey = (k) => {\n    let m = k.match(/^(.+)-(.+)-(.+)$/i);\n    return `${m[1]}[${m[2]}][${m[3]}]`;\n};\n/**\n * {mlang} searchex regex\n */\n/*\nconst searchex =\n  /{\\s*mlang\\s+((?:[a-z0-9_-]+)(?:\\s*,\\s*[a-z0-9_-]+\\s*)*)\\s*}(.*?){\\s*mlang\\s*}/dgis;\n*/\n/**\n * Search for mlang tags\n *\n * The code for this js parser was adapted from filter/multilang2\n * @todo store for future ref\n * @param {string} text Text with {mlang}\n * @returns {string}\n */\n/*\nconst mlangparser = (text) => {\n  // Search for {mlang} not found.\n  if (text.match(searchex) === null) {\n    return text;\n  }\n  // Replace callback for searchex results.\n  const replacecallback = (lang, match) => {\n    let blocklang = match.split(searchex)[1];\n    let blocktext = match.split(searchex)[2];\n    if (blocklang === lang) {\n      return blocktext;\n    } else {\n      return \"\";\n    }\n  };\n\n  // Get searchex results.\n  let result = text.replace(searchex, (match) => {\n    let lang = config.lang;\n    return replacecallback(lang, match);\n  });\n\n  // No results were found, return text in mlang other\n  if (result.length === 0) {\n    let mlangpattern = \"{mlang other}(.*?){mlang}\";\n    let mlangex = new RegExp(mlangpattern, \"dgis\");\n    let matches = text.match(mlangex);\n    if (matches[0].split(searchex)[2]) {\n      return matches[0].split(searchex)[2];\n    }\n  }\n\n  // Return the found string.\n  return result;\n};\n*/\n"],"names":["tempTranslations","editorType","config","autotranslateButton","checkboxes","cfg","userPrefs","document","querySelector","Selectors","actions","autoTranslateBtn","querySelectorAll","checkBoxes","addEventListener","e","target","closest","targetSwitcher","switchTarget","sourceSwitcher","switchSource","showUpdated","showRows","statuses","updated","checked","showNeedUpdate","needsupdate","onItemChecked","toggleMultilang","onToggleMultilang","currentlang","lang","undefined","create","title","body","show","removeOnClose","doAutotranslate","selectAllBtn","toggleAllCheckboxes","toggleAutotranslateButton","selecAllBtn","autotranslate","disabled","validatorsBtns","forEach","key","parentElement","dataset","keyValidator","window","console","log","saveTranslation","editor","innerHTML","text","icon","replaceKey","validatorIcon","selector","editors","multiples","editorsWithKey","replace","element","id","getAttribute","tid","table","field","fielddata","courseid","parseInt","call","methodname","args","data","done","fieldtext","length","textarea","textAreas","updatedtext","getupdatedtext","tdata","successMessage","classList","add","setAttribute","setTimeout","errorMessage","error","debug","sourcetexts","keys","fail","mlangtext","indexOf","replacex","RegExp","updatedString","match","toggleStatus","s","selected","item","k","toggleRowVisibility","checkBoxesWithKey","row","remove","url","URL","location","href","searchParams","set","value","newUrl","toString","checkedCheckBoxes","ckBox","getTranslation","findEditor","css","createElement","textContent","sourceText","formData","FormData","append","toUpperCase","apikey","deepl","tagHandling","context","splitSentences","preserveFormatting","glossaryId","outlineDetection","toJsonArray","nonSplittingTags","splittingTags","ignoreTags","xhr","XMLHttpRequest","onreadystatechange","readyState","DONE","status","JSON","parse","responseText","translations","translation","appendChild","open","deeplurl","send","types","basic","atto","replaceAll","tiny","contentWindow","tinymce","other","i","getParentRow","contains","node","parentrow","checkboxItems","push","find","toggle","keyid","keyidToKey","source","multilang","multilangs","sep","stringify","split","m"],"mappings":"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"}