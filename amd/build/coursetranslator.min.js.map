{"version":3,"file":"coursetranslator.min.js","sources":["../src/coursetranslator.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @module     local_coursetranslator/coursetranslator\n * @copyright  2022 Kaleb Heitzman <kaleb@jamfire.io>\n * @copyright  2024 Bruno Baudry <bruno.baudry@bfh.ch>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n// Import libs\nimport ajax from \"core/ajax\";\nimport Selectors from \"./selectors\";\nimport Modal from 'core/modal';\nimport {window} from \"../../../../question/type/drawing/src/d3\";\n// Initialize the temporary translations dictionary @todo make external class\nlet tempTranslations = {};\nlet mainEditorType = '';\nlet config = {};\nlet autotranslateButton = {};\nlet checkboxes = [];\nlet sourceLang = \"\";\nlet targetLang = \"\";\nlet saveAllBtn = {};\nlet usage = {};\nlet format = new Intl.NumberFormat();\n\nconst registerEventListeners = () => {\n\n    document.addEventListener('change', e => {\n        window.console.info('change');\n        if (e.target.closest(Selectors.actions.targetSwitcher)) {\n            switchTarget(e);\n        }\n        if (e.target.closest(Selectors.actions.sourceSwitcher)) {\n            switchSource(e);\n        }\n        if (e.target.closest(Selectors.actions.showUpdated)) {\n            showRows(Selectors.statuses.updated, e.target.checked);\n        }\n        if (e.target.closest(Selectors.actions.showNeedUpdate)) {\n            showRows(Selectors.statuses.needsupdate, e.target.checked);\n        }\n        if (e.target.closest(Selectors.actions.checkBoxes) || e.target.closest(Selectors.actions.sourceselect)) {\n            onItemChecked(e);\n        }\n    });\n    document.addEventListener('click', e => {\n        if (e.target.closest(Selectors.actions.toggleMultilang)) {\n            onToggleMultilang(e.target.closest(Selectors.actions.toggleMultilang));\n        }\n        if (e.target.closest(Selectors.actions.autoTranslateBtn)) {\n            if (config.currentlang === config.lang || config.lang === undefined) {\n                Modal.create({\n                    title: 'Cannot call deepl',\n                    body: `<p>Both languges are the same {$config.lang}</p>`,\n                    show: true,\n                    removeOnClose: true,\n                });\n            } else {\n                doAutotranslate();\n            }\n        }\n        if (e.target.closest(Selectors.actions.selectAllBtn)) {\n            toggleAllCheckboxes(e);\n        }\n        if (e.target.closest(Selectors.actions.saveAll)) {\n            const selected = document.querySelectorAll(Selectors.statuses.checkedCheckBoxes);\n            selected.forEach((e) => {\n                const key = e.dataset.key;\n                if (tempTranslations[key].translation !== \"\") {\n                    saveTranslation(key);\n                } else {\n                    window.console.warn(\"not translated \" + key);\n                }\n            });\n        }\n    });\n\n};\nconst registerUI = () => {\n    try {\n        saveAllBtn = document.querySelector(Selectors.actions.saveAll);\n        sourceLang = document.querySelector(Selectors.actions.sourceSwitcher).value;\n        targetLang = document.querySelector(Selectors.actions.targetSwitcher).value;\n        autotranslateButton = document.querySelector(Selectors.actions.autoTranslateBtn);\n        checkboxes = document.querySelectorAll(Selectors.actions.checkBoxes);\n        // Initialise status object.\n        checkboxes.forEach((node) => (tempTranslations[node.dataset.key] = {}));\n    } catch (e) {\n        if (config.debug) {\n            window.console.error(e.message);\n        }\n    }\n};\n/**\n * Translation Editor UI\n * @param {Object} cfg JS Config\n */\nexport const init = (cfg) => {\n    config = cfg;\n    usage = config.usage;\n    if (config.debug > 0) {\n        window.console.info(\"debugging coursetranslator\");\n        window.console.info(config);\n        window.console.info(usage);\n    }\n    mainEditorType = config.userPrefs;\n    // Setup\n    registerUI();\n    registerEventListeners();\n    toggleAutotranslateButton();\n    const selectAllBtn = document.querySelector(Selectors.actions.selectAllBtn);\n    selectAllBtn.disabled = sourceLang === targetLang;\n    /**\n     * Validaate translation ck\n     */\n    const validators = document.querySelectorAll(Selectors.actions.validatorsBtns);\n    validators.forEach((item) => {\n        // Get the stored data and do the saving from editors content\n        item.addEventListener('click', (e) => {\n            const _this = e.target.closest(Selectors.actions.validatorsBtns);\n            let key = _this.dataset.keyValidator;\n            if (tempTranslations[key] === null || tempTranslations[key] === undefined) {\n                /**\n                 * @todo do a UI feedback (disable save )\n                 */\n                window.console.warn(`Transaltion key \"${key}\" is undefined `,);\n            } else {\n                saveTranslation(key);\n            }\n        });\n    });\n    /**\n     * Selection Checkboxes\n     */\n    checkboxes.forEach((e) => {\n        e.disabled = sourceLang === targetLang;\n        e.addEventListener(\"click\", () => {\n            toggleAutotranslateButton();\n        });\n    });\n    showRows(Selectors.statuses.updated, document.querySelector(Selectors.actions.showUpdated).checked);\n    showRows(Selectors.statuses.needsupdate, document.querySelector(Selectors.actions.showNeedUpdate).checked);\n};\nconst showErrorMessageForEditor = (key, message) => {\n    let parent = document.querySelector(Selectors.editors.multiples.editorsWithKey.replace(\"<KEY>\", key));\n    const errorMsg = document.createElement('div');\n    errorMsg.classList = ['alert alert-danger'];\n    errorMsg.innerHTML = message;\n    parent.appendChild(errorMsg);\n};\n\n/**\n * Save Translation to Moodle\n * @param  {String} key Data Key\n */\nconst saveTranslation = (key) => {\n    // Get processing vars.\n    let editor = tempTranslations[key].editor;\n    let text = editor.innerHTML; // We keep the editors text in case translation is edited\n    let sourceText = tempTranslations[key].source;\n    let element = document.querySelector(Selectors.editors.multiples.editorsWithKey.replace(\"<KEY>\", key));\n    let id = element.getAttribute(\"data-id\");\n    let tid = element.getAttribute(\"data-tid\");\n    let table = element.getAttribute(\"data-table\");\n    let field = element.getAttribute(\"data-field\");\n\n    // Get the latest field data\n    let fielddata = {};\n    fielddata.courseid = config.courseid;\n    fielddata.id = parseInt(id);\n    fielddata.table = table;\n    fielddata.field = field;\n    if (config.debug > 0) {\n        window.console.info(fielddata);\n    }\n    // Get the latest data to parse text against.\n    ajax.call([\n        {\n            methodname: \"local_coursetranslator_get_field\",\n            args: {\n                data: [fielddata],\n            },\n            done: (data) => {\n                // The latests field text so multiple translators can work at the same time\n                let fieldtext = data[0].text;\n\n                // Field text exists\n                if (data.length > 0) {\n                    // Updated hidden textarea with updatedtext\n                    let textarea = document.querySelector(\n                        Selectors.editors.multiples.textAreas\n                            .replace(\"<KEY>\", key));\n                    // Get the updated text\n                    let updatedtext = getupdatedtext(fieldtext, text, sourceText, tempTranslations[key].sourceLang);\n\n                    // Build the data object\n                    let tdata = {};\n                    tdata.courseid = config.courseid;\n                    tdata.id = parseInt(id);\n                    tdata.tid = tid;\n                    tdata.table = table;\n                    tdata.field = field;\n                    tdata.text = updatedtext;\n                    if (config.debug > 0) {\n                        window.console.info(updatedtext);\n                        window.console.info(tdata);\n                    }\n                    // Success Message\n                    const successMessage = () => {\n                        element.classList.add(\"local-coursetranslator__success\");\n                        // Add saved indicator\n                        setIconStatus(key, Selectors.statuses.success);\n                        // Remove success message after a few seconds\n                        setTimeout(() => {\n                            let multilangPill = document.querySelector(replaceKey(Selectors.statuses.multilang, key));\n                            let prevTransStatus = document.querySelector(replaceKey(Selectors.statuses.prevTransStatus, key));\n                            prevTransStatus.classList = \"badge badge-pill badge-success\";\n                            if (multilangPill.classList.contains(\"invisible\")) {\n                                multilangPill.classList.remove('invisible');\n                            }\n                            setIconStatus(key, Selectors.statuses.saved);\n                        });\n                    };\n                    // Error Mesage\n                    const errorMessage = (error) => {\n                        editor.classList.add(\"local-coursetranslator__error\");\n                        setIconStatus(key, Selectors.statuses.failed);\n                        const setIndex = error.debuginfo.indexOf(\"SET\") === -1 ? 15 : error.debuginfo.indexOf(\"SET\");\n                        let message = error.message + '<br/>' + error.debuginfo.slice(0, setIndex) + '...';\n                        if (config.debug > 0) {\n                            message = error.debuginfo;\n                        }\n                        showErrorMessageForEditor(key, message);\n                    };\n                    // Submit the request\n                    ajax.call([\n                        {\n                            methodname: \"local_coursetranslator_update_translation\",\n                            args: {\n                                data: [tdata],\n                            },\n                            done: (data) => {\n                                // Print response to console log\n                                if (config.debug > 0) {\n                                    window.console.info(\"ws: \", key, data);\n                                }\n\n                                // Display success message\n                                if (data.length > 0) {\n                                    successMessage();\n                                    textarea.innerHTML = data[0].text;\n\n                                    // Update source lang if necessary\n                                    if (config.currentlang === config.lang) {\n                                        document.querySelector(Selectors.sourcetexts.keys.replace('<KEY>', key))\n                                            .innerHTML = text;\n                                    }\n                                } else {\n                                    // Something went wrong with the data\n                                    errorMessage();\n                                }\n                            },\n                            fail: (error) => {\n                                // An error occurred\n                                errorMessage(error);\n                            },\n                        },\n                    ]);\n                } else {\n                    // Something went wrong with field retrieval\n                    window.console.warn(data);\n                }\n            },\n            fail: (error) => {\n                // An error occurred\n                window.console.warn(error);\n            },\n        },\n    ]);\n};\n\n/**\n * Update Textarea\n * @param {string} fieldtext Latest text from database including all mlang tag if any.\n * @param {string} text Translated Text to update.\n * @param {string} source Original text translated from.\n * @param {string} itemSourcelang The source language code\n * @returns {string}\n */\nconst getupdatedtext = (fieldtext, text, source, itemSourcelang) => {\n    let mlangOtherStart = '{mlang other}';\n    let mlangSourceStart = `{mlang ${itemSourcelang}}`;\n    // Search for {mlang} not found.\n    let isSourceOther = itemSourcelang === sourceLang;\n    let targetLangTag = `{mlang ${targetLang}}`; // Target tag.\n    let targetlangtext = `${targetLangTag}${text}{mlang}`;\n    // Return new mlang text if mlang has not been used before.\n    if (fieldtext.indexOf(\"{mlang\") === -1) {\n        let otherlangtext = `${mlangOtherStart}${source}{mlang}`; // Other tag.\n        let sourcelangtext = `${mlangSourceStart}${source}{mlang}`; // Source tag.\n        // If the source lang of the text is not the main language still create both source-lang tag and source-other.\n        return (isSourceOther ? otherlangtext : otherlangtext + sourcelangtext) + targetlangtext;\n    }\n    // Use regex to replace the string.\n    // Important to leave the \"s\" mofifiers to match line breaks added by the rich text editors.\n    let alllangregex = new RegExp(`({mlang [a-z]{2,5}})(.*?){mlang}`, \"gs\");\n    let all = {};\n    // Start tag.\n    let tagReg = new RegExp(\"{mlang (other|[a-z]{2})}\", \"\");\n    let splited = fieldtext.split(alllangregex);\n    if (config.debug > 0) {\n        window.console.info(\"SPLITED\", splited);\n    }\n    let foundsourcetag = \"\";\n    var l = \"\"; // Build a dictionary of current mlang tags in the source content.\n    for (var i in splited) {\n        if (splited[i] === \"\") { // Skip line breaks and what ever in between tags.\n            continue;\n        }\n        if (splited[i].match(tagReg)) {\n            l = splited[i].match(tagReg)[0]; // Create the key.\n        } else if (l !== \"\") {\n            all[l] = splited[i]; // Insert key/value.\n            if (splited[i] === source) {\n                foundsourcetag = l;\n            }\n            l = \"\";\n        }\n    }\n    // If there is a other tag we replace it by the source.\n    // @todo a mechanism to propose to the user to select another tag for this.\n    if (!isSourceOther) {\n        // The source lang is different from the main source language.\n        if (all[mlangOtherStart] === null) {\n            all[mlangOtherStart] = source;\n        }\n        all[mlangSourceStart] = source;\n    } else {\n        if (foundsourcetag !== mlangOtherStart) {\n            // We need to replace the source.\n            delete all[foundsourcetag];\n        }\n        all[mlangOtherStart] = source;\n    }\n    all[targetLangTag] = text;\n    let s = \"\";\n    for (let tag in all) {\n        s += tag + all[tag] + \"{mlang}\";\n    }\n    return s;\n};\n\nconst onItemChecked = (e) => {\n    if (config.debug > 0) {\n        window.console.info(\"SELECTION\", e.target.getAttribute('data-key'), e.target.getAttribute('data-action'));\n    }\n    const key = e.target.getAttribute('data-key');\n    if (e.target.getAttribute('data-action') === \"local-coursetranslator/checkbox\") {\n        toggleStatus(key, e.target.checked);\n        countWordAndChar();\n    } else {\n        initTempForKey(key, false);\n    }\n};\nconst initTempForKey = (key, blank) => {\n    // Get the source text\n    const sourceText = document.querySelector(Selectors.sourcetexts.keys.replace(\"<KEY>\", key)).getAttribute(\"data-sourcetext-raw\");\n    const editorSettings = findEditor(key);\n    const sourceLang = document.querySelector(Selectors.sourcetexts.sourcelangs.replace(\"<KEY>\", key)).value;\n    tempTranslations[key] = {\n        'editorType': null,\n        'editor': null,\n        'source': sourceText,\n        'sourceLang': sourceLang,\n        'status': Selectors.statuses.wait,\n        'translation': ''\n    };\n    if (!blank) {\n        if (editorSettings === null || editorSettings.editor === null) {\n            setIconStatus(key, Selectors.statuses.failed);\n            showErrorMessageForEditor(key, 'Original editor not found...');\n        } else {\n            // Initialize status for the source content.\n            tempTranslations[key] = {\n                'editorType': editorSettings.editorType,\n                'editor': editorSettings.editor,\n                'source': sourceText,\n                'sourceLang': sourceLang,\n                'status': Selectors.statuses.wait,\n                'translation': ''\n            };\n        }\n    }\n    window.console.info(tempTranslations[key]);\n};\nconst toggleStatus = (key, checked) => {\n    const status = document.querySelector(replaceKey(Selectors.actions.validatorBtn, key)).dataset.status;\n    switch (status) {\n        case Selectors.statuses.wait :\n            if (checked) {\n                setIconStatus(key, Selectors.statuses.totranslate);\n                initTempForKey(key, false);\n            } else {\n                initTempForKey(key, true);\n            }\n            break;\n        case Selectors.statuses.totranslate :\n            if (checked && tempTranslations[key]?.translation?.length > 0) {\n                setIconStatus(key, Selectors.statuses.tosave, true);\n            } else {\n                setIconStatus(key, Selectors.statuses.wait);\n            }\n            break;\n        case Selectors.statuses.tosave :\n            if (!checked) {\n                setIconStatus(key, Selectors.statuses.totranslate);\n            }\n            break;\n        case Selectors.statuses.failed :\n            break;\n        case Selectors.statuses.success :\n            break;\n        case Selectors.statuses.saved :\n            break;\n    }\n};\nconst setIconStatus = (key, s = Selectors.statuses.wait, isBtn = false) => {\n    let icon = document.querySelector(replaceKey(Selectors.actions.validatorBtn, key));\n    if (isBtn) {\n        if (!icon.classList.contains('btn')) {\n            icon.classList.add('btn');\n        }\n        if (icon.classList.contains('disable')) {\n            icon.classList.remove('disable');\n        }\n    } else {\n        if (!icon.classList.contains('disable')) {\n            icon.classList.add('disable');\n        }\n        if (icon.classList.contains('btn')) {\n            icon.classList.remove('btn');\n        }\n    }\n    icon.setAttribute('role', isBtn ? 'button' : 'status');\n    icon.setAttribute('data-status', s);\n};\n/**\n * Shows/hides rows\n * @param {string} selector\n * @param {boolean} selected\n */\nconst showRows = (selector, selected) => {\n    const items = document.querySelectorAll(selector);\n    const allSelected = document.querySelector(Selectors.actions.selectAllBtn).checked;\n    items.forEach((item) => {\n        let k = item.getAttribute('data-row-id');\n        toggleRowVisibility(item, selected);\n        // When a row is toggled then we don't want it to be selected and sent from translation.\n        item.querySelector(replaceKey(Selectors.editors.multiples.checkBoxesWithKey, k)).checked = allSelected && selected;\n        toggleStatus(k, false);\n    });\n    toggleAutotranslateButton();\n    countWordAndChar();\n};\nconst toggleRowVisibility = (row, checked) => {\n    if (checked) {\n        row.classList.remove(\"d-none\");\n    } else {\n        row.classList.add(\"d-none\");\n    }\n};\n/**\n * Event listener to switch target lang\n * @param {Event} e\n */\nconst switchTarget = (e) => {\n    let url = new URL(window.location.href);\n    let searchParams = url.searchParams;\n    searchParams.set(\"target_lang\", e.target.value);\n    window.location = url.toString();\n};\n/**\n * Event listener to switch source lang\n * Hence reload the page and change the site main lang\n * @param {Event} e\n */\nconst switchSource = (e) => {\n    let url = new URL(window.location.href);\n    let searchParams = url.searchParams;\n    searchParams.set(\"lang\", e.target.value);\n    window.location = url.toString();\n};\n/**\n * Launch autotranslation\n */\nconst doAutotranslate = () => {\n    saveAllBtn.hidden = saveAllBtn.disabled = false;\n    document\n        .querySelectorAll(Selectors.statuses.checkedCheckBoxes)\n        .forEach((ckBox) => {\n            let key = ckBox.getAttribute(\"data-key\");\n            if (tempTranslations[key].editor !== null) {\n                getTranslation(key);\n            }\n        });\n};\n/**\n * @todo extract images ALT tags to send for translation\n * Send for Translation to DeepL\n * @param {Integer} key Translation Key\n */\nconst getTranslation = (key) => {\n    // Initialize global dictionary with this key's editor.\n    tempTranslations[key].staus = Selectors.statuses.wait;\n    // Build formData\n    let formData = new FormData();\n    formData.append(\"text\", tempTranslations[key].source);\n    formData.append(\"source_lang\", tempTranslations[key].sourceLang);\n    formData.append(\"target_lang\", targetLang.toUpperCase());\n    formData.append(\"auth_key\", config.apikey);\n    formData.append(\"tag_handling\", document.querySelector(Selectors.deepl.tagHandling).checked ? 'html' : 'xml');//\n    formData.append(\"context\", document.querySelector(Selectors.deepl.context).value ?? null); //\n    formData.append(\"split_sentences\", document.querySelector(Selectors.deepl.splitSentences).value);//\n    formData.append(\"preserve_formatting\", document.querySelector(Selectors.deepl.preserveFormatting).checked);//\n    formData.append(\"formality\", document.querySelector('[name=\"local-coursetranslator/formality\"]:checked').value);\n    formData.append(\"glossary_id\", document.querySelector(Selectors.deepl.glossaryId).value);//\n    formData.append(\"outline_detection\", document.querySelector(Selectors.deepl.outlineDetection).checked);//\n    formData.append(\"non_splitting_tags\", toJsonArray(document.querySelector(Selectors.deepl.nonSplittingTags).value));\n    formData.append(\"splitting_tags\", toJsonArray(document.querySelector(Selectors.deepl.splittingTags).value));\n    formData.append(\"ignore_tags\", toJsonArray(document.querySelector(Selectors.deepl.ignoreTags).value));\n    if (config.debug) {\n        window.console.info(\"Send deepl:\", formData);\n    }\n    // Update the translation\n    let xhr = new XMLHttpRequest();\n    xhr.onreadystatechange = () => {\n        if (xhr.readyState === XMLHttpRequest.DONE) {\n            const status = xhr.status;\n            if (status === 0 || (status >= 200 && status < 400)) {\n                // The request has been completed successfully\n                let data = JSON.parse(xhr.responseText);\n                // Display translation\n                tempTranslations[key].editor.innerHTML = data.translations[0].text;\n                // Store the translation in the global object\n                tempTranslations[key].translation = data.translations[0].text;\n                setIconStatus(key, Selectors.statuses.tosave, true);\n                injectImageCss(\n                    tempTranslations[key].editorType,\n                    tempTranslations[key].editor); // Hack for iframes based editors to highlight missing pictures.\n            } else {\n                // Oh no! There has been an error with the request!\n                setIconStatus(key, Selectors.statuses.failed, false);\n            }\n        }\n    };\n    xhr.open(\"POST\", config.deeplurl);\n    xhr.send(formData);\n};\n/**\n *\n * @param {Integer} editorSettings\n * */\n/**\n * Inject css to highlight ALT text of image not loaded because of @@POLUGINFILE@@\n * @param {string} editorType\n * @param {object} editor\n */\nconst injectImageCss = (editorType, editor) => {\n    // Prepare css to inject in iframe editors\n    const css = document.createElement('style');\n    css.textContent = 'img{background-color:yellow !important;font-style: italic;}';\n    if (editorType === \"iframe\") {\n        let editorschildrens = Array.from(editor.parentElement.children);\n        let found = false;\n        for (let j in editorschildrens) {\n            let e = editorschildrens[j];\n            if (e.innerText === css.innerText) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            editor.parentElement.appendChild(css);\n        }\n    }\n};\n/**\n * @todo get the editor from moodle db in the php.\n * Get the editor container based on recieved current user's\n * editor preference.\n * @param {Integer} key Translation Key\n */\nconst findEditor = (key) => {\n    let e = document.querySelector(Selectors.editors.types.basic\n        .replace(\"<KEY>\", key));\n    let et = 'basic';\n    if (e === null) {\n        let r = null;\n        let editorTab = [\"atto\", \"tiny\", \"marklar\", \"textarea\"];\n        if (editorTab.indexOf(mainEditorType) === -1) {\n            window.console.warn('Unsupported editor ' + mainEditorType);\n        } else {\n            // First let's try the current editor.\n            try {\n                r = findEditorByType(key, mainEditorType);\n            } catch (e) {\n                // Content was edited by another editor.\n                window.console.warn('Editor not found: ' + mainEditorType);\n            }\n        }\n        return r;\n    } else {\n        return {editor: e, editorType: et};\n    }\n};\n/**\n * @param {string} key\n * @param {object} editorType\n * @returns {{editor: object, editorType: string}}\n */\nconst findEditorByType = (key, editorType) => {\n    let et = 'basic';\n    let ed = null;\n    switch (editorType) {\n        case \"atto\" :\n            et = 'iframe';\n            ed = document.querySelector(\n                Selectors.editors.types.atto\n                    .replaceAll(\"<KEY>\", key));\n            break;\n        case \"tiny\":\n            et = 'iframe';\n            ed = document.querySelector(Selectors.editors.types.tiny\n                .replaceAll(\"<KEY>\", key))\n                .contentWindow.tinymce;\n            break;\n        case 'marklar':\n        case \"textarea\" :\n            ed = document.querySelector(Selectors.editors.types.other\n                .replaceAll(\"<KEY>\", key));\n            break;\n    }\n    return {editor: ed, editorType: et};\n};\n/**\n * Toggle checkboxes\n * @param {Event} e Event\n */\nconst toggleAllCheckboxes = (e) => {\n    // Check/uncheck checkboxes\n    if (e.target.checked) {\n        checkboxes.forEach((i) => {\n            // Toggle check box upon visibility\n            i.checked = !getParentRow(i).classList.contains('d-none');\n            toggleStatus(i.getAttribute('data-key'), i.checked);\n        });\n    } else {\n        checkboxes.forEach((i) => {\n            i.checked = false;\n            toggleStatus(i.getAttribute('data-key'), false);\n        });\n    }\n    toggleAutotranslateButton();\n    countWordAndChar();\n};\nconst getParentRow = (node) => {\n    return node.closest(replaceKey(Selectors.sourcetexts.parentrow, node.getAttribute('data-key')));\n};\n/**\n * Toggle Autotranslate Button\n */\nconst toggleAutotranslateButton = () => {\n    autotranslateButton.disabled = true;\n    for (let i in checkboxes) {\n        let e = checkboxes[i];\n        if (e.checked) {\n            autotranslateButton.disabled = false;\n            break;\n        }\n    }\n};\n/**\n * Multilang button handler\n * @param {Event} e Event\n */\nconst onToggleMultilang = (e) => {\n    e.classList.toggle(\"showing\");\n    let keyid = e.getAttribute('aria-controls');\n    let key = keyidToKey(keyid);\n    let source = document.querySelector(replaceKey(Selectors.sourcetexts.keys, key));\n    let multilang = document.querySelector(replaceKey(Selectors.sourcetexts.multilangs, keyid));\n    source.classList.toggle(\"show\");\n    multilang.classList.toggle(\"show\");\n};\n/**\n * Json helper\n * @param {string} s\n * @param {string} sep\n * @returns {string}\n */\nconst toJsonArray = (s, sep = \",\") => {\n    return JSON.stringify(s.split(sep));\n};\n/**\n * Simple helper to manage selectors\n * @param {string} s\n * @param {string} k\n * @returns {*}\n */\nconst replaceKey = (s, k) => {\n    return s.replace(\"<KEY>\", k);\n};\n/**\n * Transforms a keyid to a key\n * @param {string} k\n * @returns {`${*}[${*}][${*}]`}\n */\nconst keyidToKey = (k) => {\n    let m = k.match(/^(.+)-(.+)-(.+)$/i);\n    return `${m[1]}[${m[2]}][${m[3]}]`;\n};\n/**\n * Launch countWordAndChar\n */\nconst countWordAndChar = () => {\n    let wrdsc = 0;\n    let cws = 0;\n    let cwos = 0;\n    document\n        .querySelectorAll(Selectors.statuses.checkedCheckBoxes)\n        .forEach((ckBox) => {\n            let key = ckBox.getAttribute(\"data-key\");\n            let results = getCount(key);\n            wrdsc += results.wordCount;\n            cwos += results.charNumWithOutSpace;\n            cws += results.charNumWithSpace;\n        });\n    const wordCount = document.querySelector(Selectors.statuses.wordcount);\n    const charWithSpace = document.querySelector(Selectors.statuses.charNumWithSpace);\n    const charWOSpace = document.querySelector(Selectors.statuses.charNumWithOutSpace);\n    const deeplUseSpan = document.querySelector(Selectors.statuses.deeplUsage);\n    const deeplMaxSpan = document.querySelector(Selectors.statuses.deeplMax);\n    const parent = document.querySelector(Selectors.statuses.deeplStatusContainer);\n    let current = cwos + usage.character.count;\n    wordCount.innerText = wrdsc;\n    charWithSpace.innerText = cws;\n    charWOSpace.innerText = cwos;\n    deeplUseSpan.innerText = format.format(current);\n    deeplMaxSpan.innerText = usage.character.limit === null ? '∞' : format.format(usage.character.limit);\n    if (current >= usage.character.limit) {\n        parent.classList.remove('alert-success');\n        parent.classList.add('alert-danger');\n    } else {\n        parent.classList.add('alert-success');\n        parent.classList.remove('alert-danger');\n    }\n};\n/**\n * @param {string} key\n * @return {object}\n */\nconst getCount = (key) => {\n    let sourceText = document.querySelector(Selectors.sourcetexts.keys.replace(\"<KEY>\", key)).getAttribute(\"data-sourcetext-raw\");\n    return countChars(sourceText);\n};\n/**\n *\n * @param {String} val\n * @returns {{wordCount: *, charNumWithSpace: *, charNumWithOutSpace: *}}\n */\nconst countChars = (val) => {\n    const withSpace = val.length;\n    // Using Regex\n    const withOutSpace = val.replace(/\\s+/g, '').length;\n    const wordsCount = val.match(/\\S+/g).length;\n    return {\n        \"wordCount\": wordsCount,\n        \"charNumWithSpace\": withSpace,\n        \"charNumWithOutSpace\": withOutSpace\n    };\n};\n"],"names":["tempTranslations","mainEditorType","config","autotranslateButton","checkboxes","sourceLang","targetLang","saveAllBtn","usage","format","Intl","NumberFormat","cfg","debug","console","info","userPrefs","document","querySelector","Selectors","actions","saveAll","sourceSwitcher","value","targetSwitcher","autoTranslateBtn","querySelectorAll","checkBoxes","forEach","node","dataset","key","e","error","message","registerUI","addEventListener","target","closest","switchTarget","switchSource","showUpdated","showRows","statuses","updated","checked","showNeedUpdate","needsupdate","sourceselect","onItemChecked","toggleMultilang","onToggleMultilang","currentlang","lang","undefined","create","title","body","show","removeOnClose","doAutotranslate","selectAllBtn","toggleAllCheckboxes","checkedCheckBoxes","translation","saveTranslation","warn","toggleAutotranslateButton","disabled","validatorsBtns","item","keyValidator","showErrorMessageForEditor","parent","editors","multiples","editorsWithKey","replace","errorMsg","createElement","classList","innerHTML","appendChild","editor","text","sourceText","source","element","id","getAttribute","tid","table","field","fielddata","courseid","parseInt","call","methodname","args","data","done","fieldtext","length","textarea","textAreas","updatedtext","getupdatedtext","tdata","successMessage","add","setIconStatus","success","setTimeout","multilangPill","replaceKey","multilang","prevTransStatus","contains","remove","saved","errorMessage","failed","setIndex","debuginfo","indexOf","slice","sourcetexts","keys","fail","itemSourcelang","mlangSourceStart","isSourceOther","targetLangTag","targetlangtext","otherlangtext","sourcelangtext","alllangregex","RegExp","all","tagReg","splited","split","foundsourcetag","l","i","match","s","tag","toggleStatus","countWordAndChar","initTempForKey","blank","editorSettings","findEditor","sourcelangs","wait","editorType","validatorBtn","status","totranslate","tosave","isBtn","icon","setAttribute","selector","selected","items","allSelected","k","toggleRowVisibility","checkBoxesWithKey","row","url","URL","window","location","href","searchParams","set","toString","hidden","ckBox","getTranslation","staus","formData","FormData","append","toUpperCase","apikey","deepl","tagHandling","context","splitSentences","preserveFormatting","glossaryId","outlineDetection","toJsonArray","nonSplittingTags","splittingTags","ignoreTags","xhr","XMLHttpRequest","onreadystatechange","readyState","DONE","JSON","parse","responseText","translations","injectImageCss","open","deeplurl","send","css","textContent","editorschildrens","Array","from","parentElement","children","found","j","innerText","types","basic","r","findEditorByType","et","ed","atto","replaceAll","tiny","contentWindow","tinymce","other","getParentRow","parentrow","toggle","keyid","keyidToKey","multilangs","sep","stringify","m","wrdsc","cws","cwos","results","getCount","wordCount","charNumWithOutSpace","charNumWithSpace","wordcount","charWithSpace","charWOSpace","deeplUseSpan","deeplUsage","deeplMaxSpan","deeplMax","deeplStatusContainer","current","character","count","limit","countChars","val","withSpace","withOutSpace"],"mappings":"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"}