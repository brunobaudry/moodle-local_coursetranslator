{"version":3,"file":"coursetranslator.min.js","sources":["../src/coursetranslator.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @module     local_coursetranslator/coursetranslator\n * @copyright  2022 Kaleb Heitzman <kaleb@jamfire.io>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/**\n * @todo refactor query selectors to dat-* attributes as recommended by\n * https://moodledev.io/docs/guides/javascript#listen-to-a-dom-event\n */\n\n// import libs\nimport ajax from \"core/ajax\";\n\n/**\n * Translation Editor UI\n * @param {Object} config JS Config\n */\nexport const init = (config) => {\n  window.console.log(config.userPrefs);\n  window.console.log(config.ed);//\n  // get the users editors prefs\n  let editorType = config.userPrefs.htmleditor;\n  // Initialize the temporary translations\n  let tempTranslations = {};\n  /**\n   * Convert a template string into HTML DOM nodes\n   * @param  {String} string The template string\n   * @return {Node}       The template HTML\n   */\n  const stringToHTML = (string) => {\n    // See if DOMParser is supported\n    var support = (() => {\n      if (!window.DOMParser) {\n        return false;\n      }\n      var parser = new DOMParser();\n      try {\n        parser.parseFromString(\"x\", \"text/html\");\n      } catch (err) {\n        return false;\n      }\n      return true;\n    })();\n\n    // If DOMParser is supported, use it\n    if (support) {\n      var parser = new DOMParser();\n      var doc = parser.parseFromString(string, \"text/html\");\n      return doc.body.childNodes;\n    }\n\n    // Otherwise, fallback to old-school method\n    var dom = document.createElement(\"div\");\n    dom.innerHTML = string;\n    return dom;\n  };\n\n  /**\n   * {mlang} searchex regex\n   */\n  const searchex =\n    /{\\s*mlang\\s+((?:[a-z0-9_-]+)(?:\\s*,\\s*[a-z0-9_-]+\\s*)*)\\s*}(.*?){\\s*mlang\\s*}/dgis;\n\n  /**\n   * Search for mlang tags\n   *\n   * The code for this js parser was adapted from filter/multilang2\n   *\n   * @param {string} text Text with {mlang}\n   * @returns {string}\n   */\n  const mlangparser = (text) => {\n    // Search for {mlang} not found.\n    if (text.match(searchex) === null) {\n      return text;\n    }\n\n    // Replace callback for searchex results.\n    const replacecallback = (lang, match) => {\n      let blocklang = match.split(searchex)[1];\n      let blocktext = match.split(searchex)[2];\n      if (blocklang === lang) {\n        return blocktext;\n      } else {\n        return \"\";\n      }\n    };\n\n    // Get searchex results.\n    let result = text.replace(searchex, (match) => {\n      let lang = config.lang;\n      return replacecallback(lang, match);\n    });\n\n    // No results were found, return text in mlang other\n    if (result.length === 0) {\n      let mlangpattern = \"{mlang other}(.*?){mlang}\";\n      let mlangex = new RegExp(mlangpattern, \"dgis\");\n      let matches = text.match(mlangex);\n      if (matches[0].split(searchex)[2]) {\n        return matches[0].split(searchex)[2];\n      }\n    }\n\n    // Return the found string.\n    return result;\n  };\n\n  /**\n   * Switch Translation Language\n   */\n  let localeSwitcher = document.querySelector(\n    \".local-coursetranslator__localeswitcher\"\n  );\n  localeSwitcher.addEventListener(\"change\", (e) => {\n    let url = new URL(window.location.href);\n    let searchParams = url.searchParams;\n    searchParams.set(\"course_lang\", e.target.value);\n    let newUrl = url.toString();\n\n    window.location = newUrl;\n\n  });\n\n  /**\n   * Show Updated Checkbox\n   */\n  let showUpdatedCheckbox = document.querySelector(\n    \".local-coursetranslator__show-updated\"\n  );\n  showUpdatedCheckbox.addEventListener(\"change\", (e) => {\n    let items = document.querySelectorAll('[data-status=\"updated\"]');\n    if (e.target.checked) {\n      items.forEach((item) => {\n        item.classList.remove(\"d-none\");\n      });\n    } else {\n      items.forEach((item) => {\n        item.classList.add(\"d-none\");\n      });\n    }\n  });\n\n  /**\n   * Show Update Needed Checkbox\n   */\n  let showUpdateNeededCheckbox = document.querySelector(\n    \".local-coursetranslator__show-needsupdate\"\n  );\n  showUpdateNeededCheckbox.addEventListener(\"change\", (e) => {\n    let items = document.querySelectorAll('[data-status=\"needsupdate\"]');\n    if (e.target.checked) {\n      items.forEach((item) => {\n        item.classList.remove(\"d-none\");\n      });\n    } else {\n      items.forEach((item) => {\n        item.classList.add(\"d-none\");\n      });\n    }\n  });\n\n  /**\n   * Select All Checkbox\n   */\n  const selectAll = document.querySelector(\n    \".local-coursetranslator__select-all\"\n  );\n  if (config.autotranslate) {\n    selectAll.disabled = false;\n  }\n  selectAll.addEventListener(\"click\", (e) => {\n    // See if select all is checked\n    let checked = e.target.checked;\n    let checkboxes = document.querySelectorAll(\n      \".local-coursetranslator__checkbox\"\n    );\n\n    // Check/uncheck checkboxes\n    if (checked) {\n      checkboxes.forEach((e) => {\n        e.checked = true;\n      });\n    } else {\n      checkboxes.forEach((e) => {\n        e.checked = false;\n      });\n    }\n    toggleAutotranslateButton();\n\n  });\n\n  /**\n   * Validaate translation ck\n   */\n  const validators = document.querySelectorAll(\n      \"[data-key-validator]\"\n  );\n  validators.forEach((e)=>{\n    // E.addEventListener('click',(e)=> {window.console.log(e.target.parentElement);});\n    e.addEventListener('click', (e)=> {\n      let key = e.target.parentElement.dataset.keyValidator;\n      let editor = findEditor(key);\n      window.console.log(key);\n      window.console.log(editor);\n      window.console.log(editor.innerHTML);\n\n      // SaveTranslation(tempTranslations[key],tempTranslations[key].editor,tempTranslations[key].translation);\n    });\n  });\n  /**\n  /**\n   * Autotranslate Checkboxes\n   */\n  const checkboxes = document.querySelectorAll(\n    \".local-coursetranslator__checkbox\"\n  );\n  if (config.autotranslate) {\n    checkboxes.forEach((e) => {\n      e.disabled = false;\n    });\n  }\n  checkboxes.forEach((e) => {\n    e.addEventListener(\"change\", () => {\n      toggleAutotranslateButton();\n    });\n  });\n\n  /**\n   * Autotranslate Button Display\n   * @returns void\n   */\n  const autotranslateButton = document.querySelector(\n    \".local-coursetranslator__autotranslate-btn\"\n  );\n\n  /**\n   * Toggle Autotranslate Button\n   */\n  const toggleAutotranslateButton = () => {\n    let checkboxItems = [];\n    checkboxes.forEach((e) => {\n      checkboxItems.push(e.checked);\n    });\n    let checked = checkboxItems.find((checked) => checked === true)\n      ? true\n      : false;\n    if (config.autotranslate && checked) {\n      autotranslateButton.disabled = false;\n    } else {\n      autotranslateButton.disabled = true;\n    }\n  };\n\n  /**\n   * Autotranslate Button Click\n   * @returns void\n   */\n  autotranslateButton.addEventListener(\"click\", () => {\n    document\n      .querySelectorAll(\".local-coursetranslator__checkbox:checked\")\n      .forEach((e) => {\n        let key = e.getAttribute(\"data-key\");\n        getTranslation(key);\n      });\n\n  });\n\n  /**\n   * Get the editor container\n   * @todo doc\n   * @todo query special for tinymce\n   * @todo query special for marklar\n   * @param {Integer} key Translation Key\n   */\n  const findEditor = (key) => {\n    let q ='';\n    window.console.log(\"document.querySelector('\" + q + \"')\");\n    window.console.log(\"editors pref : \" + editorType);\n    /**\n     * @todo find default editor\n     */\n    switch(editorType)\n    {\n      case \"atto\" : return document.querySelectorAll('.local-coursetranslator__editor[data-key=\"' +\n          key +\n          '\"] [contenteditable=\"true\"]');\n      case \"tiny\": return document.querySelector('.local-coursetranslator__editor[data-key=\"'+\n          key +'\"] iframe').contentWindow.tinymce;\n      case \"textarea\" : return document.querySelector('.local-coursetranslator__editor[data-key=\"'\n          + key +\n          '\"] textarea[name=\"'+ key +'[text]\"]');\n    }\n    return document.querySelectorAll(q);\n  };\n  /**\n   * Send for Translation to DeepL\n   * @param {Integer} key Translation Key\n   */\n  const getTranslation = (key) => {\n    // Store the key in the dictionary\n    tempTranslations[key] = {};\n    // Get the editor\n    let editor = findEditor(key);\n    /* Let editor = document.querySelector(\n      '.local-coursetranslator__editor[data-key=\"' +\n        key +\n        '\"] [contenteditable=\"true\"]'\n    );*/\n\n    // Get the source text\n    let sourceText = document.querySelector(\n      '[data-sourcetext-key=\"' + key + '\"]'\n    ).innerHTML;\n    tempTranslations[key] = {\n      'editor': editor,\n        'source': sourceText,\n      'translation': ''\n    };\n    // Build formData\n    let formData = new FormData();\n    formData.append(\"text\", sourceText);\n    // FormData.append(\"source_lang\", \"en\");\n    formData.append(\"source_lang\", config.currentlang);\n    formData.append(\"target_lang\", config.lang);\n    formData.append(\"preserve_formatting\", 1);\n    formData.append(\"auth_key\", config.apikey);\n    formData.append(\"tag_handling\", \"xml\");\n    formData.append(\"split_sentences\", \"nonewlines\");\n    window.console.log(config.currentlang);\n    window.console.log(\"Send deepl:\", formData);\n    // Update the translation\n    let xhr = new XMLHttpRequest();\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === XMLHttpRequest.DONE) {\n        var status = xhr.status;\n        if (status === 0 || (status >= 200 && status < 400)) {\n          // The request has been completed successfully\n          let data = JSON.parse(xhr.responseText);\n          window.console.log(\"deepl:\", key, data);\n          window.console.log(config.currentlang);\n          // Display translation\n          editor.innerHTML = data.translations[0].text;\n          // Save translation\n          // saveTranslation(key, editor, data.translations[0].text);\n          tempTranslations[key].translation = data.translations[0].text;\n        } else {\n          // Oh no! There has been an error with the request!\n          window.console.log(\"error\", status);\n        }\n      }\n    };\n    xhr.open(\"POST\", config.deeplurl);\n    xhr.send(formData);\n  };\n\n  /**\n   * Save Translation to Moodle\n   * @param  {String} key Data Key\n   * @param  {Node} editor HTML Editor Node\n   * @param  {String} text Updated Text\n   */\n  const saveTranslation = (key, editor, text) => {\n    // Get processing vars\n    let element = editor.closest(\".local-coursetranslator__editor\");\n    let id = element.getAttribute(\"data-id\");\n    let tid = element.getAttribute(\"data-tid\");\n    let table = element.getAttribute(\"data-table\");\n    let field = element.getAttribute(\"data-field\");\n\n    // Get the latest field data\n    let fielddata = {};\n    fielddata.courseid = config.courseid;\n    fielddata.id = parseInt(id);\n    fielddata.table = table;\n    fielddata.field = field;\n\n    // Get the latest data to parse text against.\n    ajax.call([\n      {\n        methodname: \"local_coursetranslator_get_field\",\n        args: {\n          data: [fielddata],\n        },\n        done: (data) => {\n          // The latests field text so multiple translators can work at the same time\n          let fieldtext = data[0].text;\n\n          // Field text exists\n          if (data.length > 0) {\n            // Updated hidden textarea with updatedtext\n            let textarea = document.querySelector(\n              '.local-coursetranslator__textarea[data-key=\"' + key + '\"]'\n            );\n            // Get the updated text\n            let updatedtext = getupdatedtext(fieldtext, text);\n\n            // Build the data object\n            let tdata = {};\n            tdata.courseid = config.courseid;\n            tdata.id = parseInt(id);\n            tdata.tid = tid;\n            tdata.table = table;\n            tdata.field = field;\n            tdata.text = updatedtext;\n\n            // Success Message\n            const successMessage = () => {\n              editor.classList.add(\"local-coursetranslator__success\");\n              // Add saved indicator\n              let indicator =\n                '<div class=\"local-coursetranslator__success-message\" data-key=\"' +\n                key +\n                '\">' +\n                config.autosavedmsg +\n                \"</div>\";\n              editor.after(...stringToHTML(indicator));\n\n              let status = document.querySelector(\n                '[data-status-key=\"' + key + '\"'\n              );\n              status.classList.replace(\"badge-danger\", \"badge-success\");\n              status.innerHTML = config.uptodate;\n\n              // Remove success message after a few seconds\n              setTimeout(() => {\n                let indicatorNode = document.querySelector(\n                  '.local-coursetranslator__success-message[data-key=\"' +\n                    key +\n                    '\"]'\n                );\n                editor.parentNode.removeChild(indicatorNode);\n              }, 3000);\n            };\n\n            // Error Mesage\n            const errorMessage = (error) => {\n              window.console.log(error);\n              editor.classList.add(\"local-coursetranslator__error\");\n            };\n\n            // Submit the request\n            ajax.call([\n              {\n                methodname: \"local_coursetranslator_update_translation\",\n                args: {\n                  data: [tdata],\n                },\n                done: (data) => {\n                  // Print response to console log\n                  if (config.debug > 0) {\n                    window.console.log(\"ws: \", key, data);\n                  }\n\n                  // Display success message\n                  if (data.length > 0) {\n                    successMessage();\n                    textarea.innerHTML = data[0].text;\n\n                    // Update source lang if necessary\n                    if (config.currentlang === config.lang) {\n                      document.querySelector(\n                        '[data-sourcetext-key=\"' + key + '\"]'\n                      ).innerHTML = text;\n                    }\n                  } else {\n                    // Something went wrong with the data\n                    errorMessage();\n                  }\n                },\n                fail: (error) => {\n                  // An error occurred\n                  errorMessage(error);\n                },\n              },\n            ]);\n          } else {\n            // Something went wrong with field retrieval\n            window.console.log(data);\n          }\n        },\n        fail: (error) => {\n          // An error occurred\n          window.console.log(error);\n        },\n      },\n    ]);\n  };\n\n  /**\n   * Update Textarea\n   * @param {string} fieldtext Latest text from database\n   * @param {string} text Text to update\n   * @returns {string}\n   */\n  const getupdatedtext = (fieldtext, text) => {\n    let lang = config.lang;\n\n    // Search for {mlang} not found.\n    let mlangtext = '{mlang ' + lang + '}' + text + '{mlang}';\n\n    // Return new mlang text if mlang has not been used before\n    if (fieldtext.indexOf(\"{mlang\") === -1) {\n      if (lang === \"other\") {\n        return mlangtext;\n      } else {\n        return (\n          \"{mlang other}\" +\n          fieldtext +\n          \"{mlang}{mlang \" +\n          lang +\n          \"}\" +\n          text +\n          \"{mlang}\"\n        );\n      }\n    }\n\n    // Use regex to replace the string\n    let pattern = `{*mlang +(${lang})}(.*?){*mlang*}`;\n    let replacex = new RegExp(pattern, \"dgis\");\n    let matches = fieldtext.match(replacex);\n\n    // Return the updated string\n    if (!matches) {\n      return fieldtext + \"{mlang \" + lang + \"}\" + text + \"{mlang}\";\n    } else {\n      return fieldtext.replace(\n        replacex,\n        \"{mlang \" + lang + \"}\" + text + \"{mlang}\"\n      );\n    }\n  };\n\n  /**\n   * Get the Translation using Moodle Web Service\n   * @returns void\n   */\n  window.addEventListener(\"load\", () => {\n    document\n      .querySelectorAll(\n        '.local-coursetranslator__editor [contenteditable=\"true\"]'\n      )\n      .forEach((editor) => {\n        // Save translation\n        editor.addEventListener(\"focusout\", () => {\n          // Get Processing Information\n          let text = editor.innerHTML;\n          let element = editor.closest(\".local-coursetranslator__editor\");\n          let key = element.getAttribute(\"data-key\");\n\n          saveTranslation(key, editor, text);\n        });\n\n        // Remove status classes\n        editor.addEventListener(\"click\", () => {\n          editor.classList.remove(\"local-coursetranslator__success\");\n          editor.classList.remove(\"local-coursetranslator__error\");\n        });\n      });\n  });\n\n  /**\n   * Get text from processing areas and add them to contenteditables\n   */\n  window.addEventListener(\"load\", () => {\n    let textareas = document.querySelectorAll(\n      \".local-coursetranslator__textarea\"\n    );\n    textareas.forEach((textarea) => {\n      // Get relevent keys and text\n      let key = textarea.getAttribute(\"data-key\");\n      let text = textarea.innerHTML;\n      let editor = document.querySelector(\n        '[data-key=\"' + key + '\"] [contenteditable=\"true\"]'\n      );\n\n      let langpattern = \"{mlang \" + config.lang + \"}(.*?){mlang}\";\n      let langex = new RegExp(langpattern, \"dgis\");\n      let matches = text.match(langex);\n\n      // Parse the text for mlang\n      let parsedtext = mlangparser(text);\n\n      if (matches && matches.length === 1) {\n        // Updated contenteditables with parsedtext\n        editor.innerHTML = parsedtext;\n      } else if (matches && matches.length > 1) {\n        document\n          .querySelector('input[type=\"checkbox\"][data-key=\"' + key + '\"]')\n          .remove();\n        document\n          .querySelector(\n            '.local-coursetranslator__editor[data-key=\"' + key + '\"] > *'\n          )\n          .remove();\n        document\n          .querySelector(\n            '.local-coursetranslator__textarea[data-key=\"' + key + '\"]'\n          )\n          .remove();\n        let p = document.createElement(\"p\");\n        p.innerHTML = \"<em><small>\" + config.multiplemlang + \"</small></em>\";\n        this.document\n          .querySelector(\n            '.local-coursetranslator__editor[data-key=\"' + key + '\"]'\n          )\n          .append(p);\n      } else {\n        editor.innerHTML = parsedtext;\n      }\n    });\n  });\n};\n"],"names":["obj","_ajax","__esModule","default","_exports","init","config","window","console","log","userPrefs","ed","editorType","htmleditor","tempTranslations","searchex","mlangparser","text","match","result","replace","replacecallback","lang","blocklang","split","blocktext","length","mlangex","RegExp","matches","document","querySelector","addEventListener","e","url","URL","location","href","searchParams","set","target","value","newUrl","toString","items","querySelectorAll","checked","forEach","item","classList","remove","add","selectAll","autotranslate","disabled","checkboxes","toggleAutotranslateButton","key","parentElement","dataset","keyValidator","editor","findEditor","innerHTML","autotranslateButton","checkboxItems","push","find","getAttribute","getTranslation","contentWindow","tinymce","sourceText","source","translation","formData","FormData","append","currentlang","apikey","xhr","XMLHttpRequest","onreadystatechange","readyState","DONE","status","data","JSON","parse","responseText","translations","open","deeplurl","send","saveTranslation","element","closest","id","tid","table","field","fielddata","courseid","parseInt","ajax","call","methodname","args","done","fieldtext","textarea","updatedtext","getupdatedtext","tdata","successMessage","indicator","autosavedmsg","after","string","DOMParser","parser","parseFromString","err","body","childNodes","dom","createElement","stringToHTML","uptodate","setTimeout","indicatorNode","parentNode","removeChild","errorMessage","error","debug","fail","mlangtext","indexOf","replacex","langpattern","langex","parsedtext","p","multiplemlang"],"mappings":"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"}