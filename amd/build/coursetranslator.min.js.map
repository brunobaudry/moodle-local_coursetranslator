{"version":3,"file":"coursetranslator.min.js","sources":["../src/coursetranslator.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @module     local_coursetranslator/coursetranslator\n * @copyright  2022 Kaleb Heitzman <kaleb@jamfire.io>\n * @copyright  2024 Bruno Baudry <bruno.baudry@bfh.ch>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n// Import libs\nimport ajax from \"core/ajax\";\nimport Selectors from \"./selectors\";\nimport Modal from 'core/modal';\n// Initialize the temporary translations dictionary @todo make external class\nlet tempTranslations = {};\nlet mainEditorType = '';\nlet config = {};\nlet autotranslateButton = {};\nlet checkboxes = [];\nlet sourceLang = \"\";\nlet targetLang = \"\";\nlet saveAllBtn = {};\n\nconst registerEventListeners = () => {\n\n    document.addEventListener('change', e => {\n        if (e.target.closest(Selectors.actions.targetSwitcher)) {\n            switchTarget(e);\n        }\n        if (e.target.closest(Selectors.actions.sourceSwitcher)) {\n            switchSource(e);\n        }\n        if (e.target.closest(Selectors.actions.showUpdated)) {\n            showRows(Selectors.statuses.updated, e.target.checked);\n        }\n        if (e.target.closest(Selectors.actions.showNeedUpdate)) {\n            showRows(Selectors.statuses.needsupdate, e.target.checked);\n        }\n        if (e.target.closest(Selectors.actions.checkBoxes)) {\n            onItemChecked(e);\n        }\n    });\n    document.addEventListener('click', e => {\n        if (e.target.closest(Selectors.actions.toggleMultilang)) {\n            onToggleMultilang(e.target.closest(Selectors.actions.toggleMultilang));\n        }\n        if (e.target.closest(Selectors.actions.autoTranslateBtn)) {\n            if (config.currentlang === config.lang || config.lang === undefined) {\n                Modal.create({\n                    title: 'Cannot call deepl',\n                    body: `<p>Both languges are the same {$config.lang}</p>`,\n                    show: true,\n                    removeOnClose: true,\n                });\n            } else {\n                doAutotranslate();\n            }\n        }\n        if (e.target.closest(Selectors.actions.selectAllBtn)) {\n            toggleAllCheckboxes(e);\n        }\n        if (e.target.closest(Selectors.actions.saveAll)) {\n            const selected = document.querySelectorAll(Selectors.statuses.checkedCheckBoxes);\n            selected.forEach((e) => {\n                const key = e.dataset.key;\n                if (tempTranslations[key].translation !== \"\") {\n                    saveTranslation(key);\n                } else {\n                    window.console.warn(\"not translated \" + key);\n                }\n            });\n        }\n    });\n\n};\nconst registerUI = () => {\n    try {\n        saveAllBtn = document.querySelector(Selectors.actions.saveAll);\n        sourceLang = document.querySelector(Selectors.actions.sourceSwitcher).value;\n        targetLang = document.querySelector(Selectors.actions.targetSwitcher).value;\n        autotranslateButton = document.querySelector(Selectors.actions.autoTranslateBtn);\n        checkboxes = document.querySelectorAll(Selectors.actions.checkBoxes);\n        // Initialise status object.\n        checkboxes.forEach((node) => (tempTranslations[node.dataset.key] = {}));\n    } catch (e) {\n        if (config.debug) {\n            window.console.error(e.message);\n        }\n    }\n};\n/**\n * Translation Editor UI\n * @param {Object} cfg JS Config\n */\nexport const init = (cfg) => {\n    config = cfg;\n    if (config.debug > 0) {\n        window.console.info(\"debugging coursetranslator\");\n        window.console.info(config);\n    }\n    mainEditorType = config.userPrefs;\n    // Setup\n    registerUI();\n    registerEventListeners();\n    toggleAutotranslateButton();\n    const selectAllBtn = document.querySelector(Selectors.actions.selectAllBtn);\n    selectAllBtn.disabled = sourceLang === targetLang;\n    /**\n     * Validaate translation ck\n     */\n    const validators = document.querySelectorAll(Selectors.actions.validatorsBtns);\n    validators.forEach((item) => {\n        // Get the stored data and do the saving from editors content\n        item.addEventListener('click', (e) => {\n            const _this = e.target.closest(Selectors.actions.validatorsBtns);\n            let key = _this.dataset.keyValidator;\n            if (tempTranslations[key] === null || tempTranslations[key] === undefined) {\n                /**\n                 * @todo do a UI feedback (disable save )\n                 */\n                window.console.warn(`Transaltion key \"${key}\" is undefined `,);\n            } else {\n                saveTranslation(key);\n            }\n        });\n    });\n    /**\n     * Selection Checkboxes\n     */\n    checkboxes.forEach((e) => {\n        e.disabled = sourceLang === targetLang;\n        e.addEventListener(\"click\", () => {\n            toggleAutotranslateButton();\n        });\n    });\n};\n/**\n * Save Translation to Moodle\n * @param  {String} key Data Key\n */\nconst saveTranslation = (key) => {\n    // Get processing vars.\n    let editor = tempTranslations[key].editor;\n    let text = editor.innerHTML; // We keep the editors text in case translation is edited\n    let sourceText = tempTranslations[key].source;\n    let icon = document.querySelector(replaceKey(Selectors.actions.validatorBtn, key));\n    let selector = Selectors.editors.multiples.editorsWithKey.replace(\"<KEY>\", key);\n    let element = document.querySelector(selector);\n    let id = element.getAttribute(\"data-id\");\n    let tid = element.getAttribute(\"data-tid\");\n    let table = element.getAttribute(\"data-table\");\n    let field = element.getAttribute(\"data-field\");\n\n    // Get the latest field data\n    let fielddata = {};\n    fielddata.courseid = config.courseid;\n    fielddata.id = parseInt(id);\n    fielddata.table = table;\n    fielddata.field = field;\n    if (config.debug > 0) {\n        window.console.info(fielddata);\n    }\n    // Get the latest data to parse text against.\n    ajax.call([\n        {\n            methodname: \"local_coursetranslator_get_field\",\n            args: {\n                data: [fielddata],\n            },\n            done: (data) => {\n                // The latests field text so multiple translators can work at the same time\n                let fieldtext = data[0].text;\n\n                // Field text exists\n                if (data.length > 0) {\n                    // Updated hidden textarea with updatedtext\n                    let textarea = document.querySelector(\n                        Selectors.editors.multiples.textAreas\n                            .replace(\"<KEY>\", key));\n                    // Get the updated text\n                    let updatedtext = getupdatedtext(fieldtext, text, sourceText);\n\n                    // Build the data object\n                    let tdata = {};\n                    tdata.courseid = config.courseid;\n                    tdata.id = parseInt(id);\n                    tdata.tid = tid;\n                    tdata.table = table;\n                    tdata.field = field;\n                    tdata.text = updatedtext;\n                    if (config.debug > 0) {\n                        window.console.info(tdata);\n                    }\n                    // Success Message\n                    const successMessage = () => {\n                        element.classList.add(\"local-coursetranslator__success\");\n                        // Add saved indicator\n                        setIconStatus(icon, Selectors.statuses.success);\n                        // Remove success message after a few seconds\n                        setTimeout(() => {\n                            let multilangPill = document.querySelector(replaceKey(Selectors.statuses.multilang, key));\n                            let prevTransStatus = document.querySelector(replaceKey(Selectors.statuses.prevTransStatus, key));\n                            prevTransStatus.classList = \"badge badge-pill badge-success\";\n                            if (multilangPill.classList.contains(\"invisible\")) {\n                                multilangPill.classList.remove('invisible');\n                            }\n                            setIconStatus(icon, Selectors.statuses.saved);\n                        });\n                    };\n                    // Error Mesage\n                    const errorMessage = (error) => {\n                        editor.classList.add(\"local-coursetranslator__error\");\n                        setIconStatus(icon, Selectors.statuses.failed);\n                        if (error) {\n                            textarea.innerHTML = error;\n                        }\n                    };\n\n                    // Submit the request\n                    ajax.call([\n                        {\n                            methodname: \"local_coursetranslator_update_translation\",\n                            args: {\n                                data: [tdata],\n                            },\n                            done: (data) => {\n                                // Print response to console log\n                                if (config.debug > 0) {\n                                    window.console.info(\"ws: \", key, data);\n                                }\n\n                                // Display success message\n                                if (data.length > 0) {\n                                    successMessage();\n                                    textarea.innerHTML = data[0].text;\n\n                                    // Update source lang if necessary\n                                    if (config.currentlang === config.lang) {\n                                        document.querySelector(Selectors.sourcetexts.keys.replace('<KEY>', key))\n                                            .innerHTML = text;\n                                    }\n                                } else {\n                                    // Something went wrong with the data\n                                    errorMessage();\n                                }\n                            },\n                            fail: (error) => {\n                                // An error occurred\n                                errorMessage(error);\n                            },\n                        },\n                    ]);\n                } else {\n                    // Something went wrong with field retrieval\n                    window.console.warn(data);\n                }\n            },\n            fail: (error) => {\n                // An error occurred\n                window.console.warn(error);\n            },\n        },\n    ]);\n};\n\n/**\n * Update Textarea\n * @param {string} fieldtext Latest text from database\n * @param {string} text Text to update\n * @param {string} source Original text translated from\n * @returns {string}\n */\nconst getupdatedtext = (fieldtext, text, source) => {\n    let targetlang = targetLang;\n    // Search for {mlang} not found.\n    let startOther = `{mlang other}`;\n    let otherlangtext = `${startOther}${source}{mlang}`; // Source tag.\n    let targetLangTag = `{mlang ${targetlang}}`; // Target tag.\n    let targetlangtext = `${targetLangTag}${text}{mlang}`;\n    if (config.debug > 0) {\n        window.console.info(\"targetlang\", targetlang);\n        window.console.info(\"startOther\", startOther);\n        window.console.info(\"otherlangtext\", otherlangtext);\n        window.console.info(\"targetLangTag\", targetLangTag);\n        window.console.info(\"targetlangtext\", targetlangtext); // Translated text with tag.\n        window.console.info(\"fieldtext\", fieldtext); // Original editor content.\n        window.console.info(\"text\", text); // Translated text without tag.\n        window.console.info(\"source\", source); // Source text without tag.\n    }\n    // Return new mlang text if mlang has not been used before.\n    if (fieldtext.indexOf(\"{mlang\") === -1) {\n        return otherlangtext + targetlangtext;\n    }\n    // Use regex to replace the string.\n    let alllanpattern = `({mlang [a-z]{2,5}})(.*?){mlang}`;\n    // Important to leave the \"s\" mofifiers to match line breaks added by the rich text editors.\n    let alllangregex = new RegExp(alllanpattern, \"gs\");\n    let all = {};\n    let tagReg = new RegExp(\"{mlang (other|[a-z]{2})}\", \"\");\n    let splited = fieldtext.split(alllangregex);\n    if (config.debug > 0) {\n        window.console.info(\"SPLITED\", splited);\n    }\n    let foundsourcetag = \"\";\n    var l = \"\";\n    for (var i in splited) {\n        if (splited[i] === \"\") {\n            continue;\n        }\n        if (splited[i].match(tagReg)) {\n            l = splited[i].match(tagReg)[0];\n        } else if (l !== \"\") {\n            all[l] = splited[i];\n            if (splited[i] === source) {\n                foundsourcetag = l;\n            }\n            l = \"\";\n        }\n    }\n    if (foundsourcetag !== startOther) {\n        // We need to replace the source.\n        delete all[foundsourcetag];\n    }\n    // If there is a other tag we replace it by the source.\n    // @todo a mechanism to propose to the user to select another tag for this.\n    all[startOther] = source;\n    all[targetLangTag] = text;\n    let s = \"\";\n    for (let tag in all) {\n        s += tag + all[tag] + \"{mlang}\";\n    }\n    return s;\n};\nconst onItemChecked = (e) => {\n    toggleStatus(e.target.getAttribute('data-key'), e.target.checked);\n};\nconst toggleStatus = (key, checked) => {\n    const icon = document.querySelector(replaceKey(Selectors.actions.validatorBtn, key));\n    const status = icon.dataset.status;\n    switch (status) {\n        case Selectors.statuses.wait :\n            if (checked) {\n                setIconStatus(icon, Selectors.statuses.totranslate);\n            }\n            break;\n        case Selectors.statuses.totranslate :\n            if (checked && tempTranslations[key]?.translation?.length > 0) {\n                setIconStatus(icon, Selectors.statuses.tosave, true);\n            } else {\n                setIconStatus(icon, Selectors.statuses.wait);\n            }\n            break;\n        case Selectors.statuses.tosave :\n            if (!checked) {\n                setIconStatus(icon, Selectors.statuses.totranslate);\n            }\n            break;\n        case Selectors.statuses.failed :\n            break;\n        case Selectors.statuses.success :\n            break;\n        case Selectors.statuses.saved :\n            break;\n    }\n};\nconst setIconStatus = (icon, s = Selectors.statuses.wait, isBtn = false) => {\n    if (isBtn) {\n        if (!icon.classList.contains('btn')) {\n            icon.classList.add('btn');\n        }\n        if (icon.classList.contains('disable')) {\n            icon.classList.remove('disable');\n        }\n    } else {\n        if (!icon.classList.contains('disable')) {\n            icon.classList.add('disable');\n        }\n        if (icon.classList.contains('btn')) {\n            icon.classList.remove('btn');\n        }\n    }\n    icon.setAttribute('role', isBtn ? 'button' : 'status');\n    icon.setAttribute('data-status', s);\n};\n/**\n * Shows/hides rows\n * @param {string} selector\n * @param {boolean} selected\n */\nconst showRows = (selector, selected) => {\n    let items = document.querySelectorAll(selector);\n    items.forEach((item) => {\n        let k = item.getAttribute('data-row-id');\n        toggleRowVisibility(item, selected);\n        // When a row is toggled then we don't want it to be selected and sent from translation.\n        item.querySelector(replaceKey(Selectors.editors.multiples.checkBoxesWithKey, k)).checked = false;\n        toggleStatus(k, false);\n    });\n    toggleAutotranslateButton();\n};\nconst toggleRowVisibility = (row, checked) => {\n    if (checked) {\n        row.classList.remove(\"d-none\");\n    } else {\n        row.classList.add(\"d-none\");\n    }\n};\n/**\n * Event listener to switch target lang\n * @param {Event} e\n */\nconst switchTarget = (e) => {\n    let url = new URL(window.location.href);\n    let searchParams = url.searchParams;\n    searchParams.set(\"target_lang\", e.target.value);\n    window.location = url.toString();\n};\n/**\n * Event listener to switch source lang\n * Hence reload the page and change the site main lang\n * @param {Event} e\n */\nconst switchSource = (e) => {\n    let url = new URL(window.location.href);\n    let searchParams = url.searchParams;\n    searchParams.set(\"lang\", e.target.value);\n    window.location = url.toString();\n};\n/**\n * Launch autotranslation\n */\nconst doAutotranslate = () => {\n    saveAllBtn.hidden = saveAllBtn.disabled = false;\n\n    document\n        .querySelectorAll(Selectors.statuses.checkedCheckBoxes)\n        .forEach((ckBox) => {\n            let key = ckBox.getAttribute(\"data-key\");\n            getTranslation(key);\n        });\n};\n/**\n * @todo extract images ALT tags to send for translation\n * Send for Translation to DeepL\n * @param {Integer} key Translation Key\n */\nconst getTranslation = (key) => {\n    // Store the key in the dictionary\n    tempTranslations[key] = {};\n    // Get the editor\n    let editorSettings = findEditor(key);\n    if (config.debug > 0) {\n        window.console.info(editorSettings);\n    }\n    let editor = editorSettings.editor;\n    let editorType = editorSettings.editorType;\n\n    // Get the source text\n    let sourceText = document.querySelector(Selectors.sourcetexts.keys.replace(\"<KEY>\", key)).getAttribute(\"data-sourcetext-raw\");\n    let icon = document.querySelector(replaceKey(Selectors.actions.validatorBtn, key));\n    // Initialize global dictionary with this key's editor.\n    tempTranslations[key] = {\n        'editorType': editorType,\n        'editor': editor,\n        'source': sourceText,\n        'status': Selectors.statuses.wait,\n        'translation': ''\n    };\n    // Build formData\n    let formData = new FormData();\n    formData.append(\"text\", sourceText);\n    formData.append(\"source_lang\", sourceLang.toUpperCase());\n    formData.append(\"target_lang\", targetLang.toUpperCase());\n    formData.append(\"auth_key\", config.apikey);\n    formData.append(\"tag_handling\", document.querySelector(Selectors.deepl.tagHandling).checked ? 'html' : 'xml');//\n    formData.append(\"context\", document.querySelector(Selectors.deepl.context).value ?? null); //\n    formData.append(\"split_sentences\", document.querySelector(Selectors.deepl.splitSentences).value);//\n    formData.append(\"preserve_formatting\", document.querySelector(Selectors.deepl.preserveFormatting).checked);//\n    formData.append(\"formality\", document.querySelector('[name=\"local-coursetranslator/formality\"]:checked').value);\n    formData.append(\"glossary_id\", document.querySelector(Selectors.deepl.glossaryId).value);//\n    formData.append(\"outline_detection\", document.querySelector(Selectors.deepl.outlineDetection).checked);//\n    formData.append(\"non_splitting_tags\", toJsonArray(document.querySelector(Selectors.deepl.nonSplittingTags).value));\n    formData.append(\"splitting_tags\", toJsonArray(document.querySelector(Selectors.deepl.splittingTags).value));\n    formData.append(\"ignore_tags\", toJsonArray(document.querySelector(Selectors.deepl.ignoreTags).value));\n    if (config.debug) {\n        window.console.info(\"Send deepl:\", formData);\n    }\n    // Update the translation\n    let xhr = new XMLHttpRequest();\n    xhr.onreadystatechange = () => {\n        if (xhr.readyState === XMLHttpRequest.DONE) {\n            const status = xhr.status;\n            if (status === 0 || (status >= 200 && status < 400)) {\n                // The request has been completed successfully\n                let data = JSON.parse(xhr.responseText);\n                // Display translation\n                editor.innerHTML = data.translations[0].text;\n                // Store the translation in the global object\n                tempTranslations[key].translation = data.translations[0].text;\n                setIconStatus(icon, Selectors.statuses.tosave, true);\n                injectImageCss(editorSettings); // Hack for iframes based editors to highlight missing pictures.\n            } else {\n                // Oh no! There has been an error with the request!\n                setIconStatus(icon, Selectors.statuses.failed, false);\n            }\n        }\n    };\n    xhr.open(\"POST\", config.deeplurl);\n    xhr.send(formData);\n};\n/**\n * Inject css to highlight ALT text of image not loaded because of @@POLUGINFILE@@\n * @param {Integer} editorSettings\n * */\nconst injectImageCss = (editorSettings) => {\n    // Prepare css to inject in iframe editors\n    const css = document.createElement('style');\n    css.textContent = 'img{background-color:yellow !important;font-style: italic;}';\n    if (editorSettings.editorType === \"iframe\") {\n        let editorschildrens = Array.from(editorSettings.editor.parentElement.children);\n        let found = false;\n        for (let j in editorschildrens) {\n            let e = editorschildrens[j];\n            if (e.innerText === css.innerText) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            editorSettings.editor.parentElement.appendChild(css);\n        }\n    }\n};\n/**\n * Get the editor container based on recieved current user's\n * editor preference.\n * @param {Integer} key Translation Key\n */\nconst findEditor = (key) => {\n    let e = document.querySelector(Selectors.editors.types.basic\n        .replace(\"<KEY>\", key));\n    let et = 'basic';\n    if (e === null) {\n        switch (mainEditorType) {\n            case \"atto\" :\n                et = 'iframe';\n                e = document.querySelector(\n                    Selectors.editors.types.atto\n                        .replaceAll(\"<KEY>\", key));\n                break;\n            case \"tiny\":\n                et = 'iframe';\n                e = document.querySelector(Selectors.editors.types.tiny\n                    .replaceAll(\"<KEY>\", key))\n                    .contentWindow.tinymce;\n                break;\n            case 'marklar':\n            case \"textarea\" :\n                e = document.querySelector(Selectors.editors.types.other\n                    .replaceAll(\"<KEY>\", key));\n                break;\n        }\n    }\n    return {editor: e, editorType: et};\n};\n/**\n * Toggle checkboxes\n * @param {Event} e Event\n */\nconst toggleAllCheckboxes = (e) => {\n    // Check/uncheck checkboxes\n    if (e.target.checked) {\n        checkboxes.forEach((i) => {\n            // Toggle check box upon visibility\n            i.checked = !getParentRow(i).classList.contains('d-none');\n            toggleStatus(i.getAttribute('data-key'), i.checked);\n        });\n    } else {\n        checkboxes.forEach((i) => {\n            i.checked = false;\n            toggleStatus(i.getAttribute('data-key'), false);\n        });\n    }\n    toggleAutotranslateButton();\n};\nconst getParentRow = (node) => {\n    return node.closest(replaceKey(Selectors.sourcetexts.parentrow, node.getAttribute('data-key')));\n};\n/**\n * Toggle Autotranslate Button\n */\nconst toggleAutotranslateButton = () => {\n    autotranslateButton.disabled = true;\n    for (let i in checkboxes) {\n        let e = checkboxes[i];\n        if (e.checked) {\n            autotranslateButton.disabled = false;\n            break;\n        }\n    }\n};\n/**\n * Multilang button handler\n * @param {Event} e Event\n */\nconst onToggleMultilang = (e) => {\n    e.classList.toggle(\"showing\");\n    let keyid = e.getAttribute('aria-controls');\n    let key = keyidToKey(keyid);\n    let source = document.querySelector(replaceKey(Selectors.sourcetexts.keys, key));\n    let multilang = document.querySelector(replaceKey(Selectors.sourcetexts.multilangs, keyid));\n    source.classList.toggle(\"show\");\n    multilang.classList.toggle(\"show\");\n};\n/**\n * Json helper\n * @param {string} s\n * @param {string} sep\n * @returns {string}\n */\nconst toJsonArray = (s, sep = \",\") => {\n    return JSON.stringify(s.split(sep));\n};\n/**\n * Simple helper to manage selectors\n * @param {string} s\n * @param {string} k\n * @returns {*}\n */\nconst replaceKey = (s, k) => {\n    return s.replace(\"<KEY>\", k);\n};\n/**\n * Transforms a keyid to a key\n * @param {string} k\n * @returns {`${*}[${*}][${*}]`}\n */\nconst keyidToKey = (k) => {\n    let m = k.match(/^(.+)-(.+)-(.+)$/i);\n    return `${m[1]}[${m[2]}][${m[3]}]`;\n};\n/**\n * {mlang} searchex regex\n */\n/*\nconst searchex =\n  /{\\s*mlang\\s+((?:[a-z0-9_-]+)(?:\\s*,\\s*[a-z0-9_-]+\\s*)*)\\s*}(.*?){\\s*mlang\\s*}/dgis;\n*/\n/**\n * Search for mlang tags\n *\n * The code for this js parser was adapted from filter/multilang2\n * @todo store for future ref\n * @param {string} text Text with {mlang}\n * @returns {string}\n */\n/*\nconst mlangparser = (text) => {\n  // Search for {mlang} not found.\n  if (text.match(searchex) === null) {\n    return text;\n  }\n  // Replace callback for searchex results.\n  const replacecallback = (lang, match) => {\n    let blocklang = match.split(searchex)[1];\n    let blocktext = match.split(searchex)[2];\n    if (blocklang === lang) {\n      return blocktext;\n    } else {\n      return \"\";\n    }\n  };\n\n  // Get searchex results.\n  let result = text.replace(searchex, (match) => {\n    let lang = config.lang;\n    return replacecallback(lang, match);\n  });\n\n  // No results were found, return text in mlang other\n  if (result.length === 0) {\n    let mlangpattern = \"{mlang other}(.*?){mlang}\";\n    let mlangex = new RegExp(mlangpattern, \"dgis\");\n    let matches = text.match(mlangex);\n    if (matches[0].split(searchex)[2]) {\n      return matches[0].split(searchex)[2];\n    }\n  }\n\n  // Return the found string.\n  return result;\n};\n*/\n"],"names":["tempTranslations","mainEditorType","config","autotranslateButton","checkboxes","sourceLang","targetLang","saveAllBtn","cfg","debug","window","console","info","userPrefs","document","querySelector","Selectors","actions","saveAll","sourceSwitcher","value","targetSwitcher","autoTranslateBtn","querySelectorAll","checkBoxes","forEach","node","dataset","key","e","error","message","registerUI","addEventListener","target","closest","switchTarget","switchSource","showUpdated","showRows","statuses","updated","checked","showNeedUpdate","needsupdate","onItemChecked","toggleMultilang","onToggleMultilang","currentlang","lang","undefined","create","title","body","show","removeOnClose","doAutotranslate","selectAllBtn","toggleAllCheckboxes","checkedCheckBoxes","translation","saveTranslation","warn","toggleAutotranslateButton","disabled","validatorsBtns","item","keyValidator","editor","text","innerHTML","sourceText","source","icon","replaceKey","validatorBtn","selector","editors","multiples","editorsWithKey","replace","element","id","getAttribute","tid","table","field","fielddata","courseid","parseInt","call","methodname","args","data","done","fieldtext","length","textarea","textAreas","updatedtext","getupdatedtext","tdata","successMessage","classList","add","setIconStatus","success","setTimeout","multilangPill","multilang","prevTransStatus","contains","remove","saved","errorMessage","failed","sourcetexts","keys","fail","targetlang","otherlangtext","targetLangTag","targetlangtext","indexOf","alllangregex","RegExp","all","tagReg","splited","split","foundsourcetag","l","i","match","s","tag","toggleStatus","status","wait","totranslate","tosave","isBtn","setAttribute","selected","k","toggleRowVisibility","checkBoxesWithKey","row","url","URL","location","href","searchParams","set","toString","hidden","ckBox","getTranslation","editorSettings","findEditor","editorType","formData","FormData","append","toUpperCase","apikey","deepl","tagHandling","context","splitSentences","preserveFormatting","glossaryId","outlineDetection","toJsonArray","nonSplittingTags","splittingTags","ignoreTags","xhr","XMLHttpRequest","onreadystatechange","readyState","DONE","JSON","parse","responseText","translations","injectImageCss","open","deeplurl","send","css","createElement","textContent","editorschildrens","Array","from","parentElement","children","found","j","innerText","appendChild","types","basic","et","atto","replaceAll","tiny","contentWindow","tinymce","other","getParentRow","parentrow","toggle","keyid","keyidToKey","multilangs","sep","stringify","m"],"mappings":"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"}