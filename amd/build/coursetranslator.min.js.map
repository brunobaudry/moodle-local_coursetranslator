{"version":3,"file":"coursetranslator.min.js","sources":["../src/coursetranslator.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @module     local_coursetranslator/coursetranslator\n * @copyright  2022 Kaleb Heitzman <kaleb@jamfire.io>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n// import libs\nimport ajax from \"core/ajax\";\nimport Selectors from \"./selectors\";\n\nlet tempTranslations = {};\nlet editorType = '';\nlet config = {};\nlet autotranslateButton = {};\nlet checkboxes = [];\nconst registerEventListeners = ()=>{\n  document.addEventListener('change', e=>{\n    if (e.target.closest(Selectors.actions.localeSwitcher)) {\n      switchLocale(e);\n    }\n    if (e.target.closest(Selectors.actions.showUpdated)) {\n      showUpdated(e);\n    }\n    if (e.target.closest(Selectors.actions.showNeedUpdate)) {\n      neededUpdate(e);\n    }\n  });\n  document.addEventListener('click', e=>{\n    if (e.target.closest(Selectors.actions.autoTranslateBtn)) {\n      doAutotranslate(e);\n    }\n    if (e.target.closest(Selectors.actions.selecAllBtn)) {\n      selectAll(e);\n    }\n  });\n};\nconst registerUI = ()=>{\n  autotranslateButton = document.querySelector(Selectors.actions.autoTranslateBtn);\n  checkboxes = document.querySelectorAll(Selectors.actions.checkBoxes);\n  window.console.log(Selectors.statuses.checkedCheckBoxes);\n};\n\n/**\n * Translation Editor UI\n * @param {Object} cfg JS Config\n */\nexport const init = (cfg) => {\n  config = cfg;\n  // Window.console.log(config.userPrefs);\n  editorType = config.userPrefs;\n  // Initialize the temporary translations dictionary @todo make external class\n  registerUI();\n  registerEventListeners();\n  /**\n   * Convert a template string into HTML DOM nodes\n   * @param  {String} string The template string\n   * @return {Node}       The template HTML\n   */\n  const stringToHTML = (string) => {\n    // See if DOMParser is supported\n    let parser;\n    const support = (() => {\n      if (!window.DOMParser) {\n        return false;\n      }\n      parser = new DOMParser();\n      try {\n        parser.parseFromString(\"x\", \"text/html\");\n      } catch (err) {\n        return false;\n      }\n      return true;\n    })();\n    // If DOMParser is supported, use it\n    if (support) {\n      parser = new DOMParser();\n      const doc = parser.parseFromString(string, \"text/html\");\n      return doc.body.childNodes;\n    }\n    // Otherwise, fallback to old-school method\n    const dom = document.createElement(\"div\");\n    dom.innerHTML = string;\n    return dom;\n  };\n\n  /**\n   * {mlang} searchex regex\n   */\n  const searchex =\n    /{\\s*mlang\\s+((?:[a-z0-9_-]+)(?:\\s*,\\s*[a-z0-9_-]+\\s*)*)\\s*}(.*?){\\s*mlang\\s*}/dgis;\n\n  /**\n   * Search for mlang tags\n   *\n   * The code for this js parser was adapted from filter/multilang2\n   *\n   * @param {string} text Text with {mlang}\n   * @returns {string}\n   */\n  const mlangparser = (text) => {\n    // Search for {mlang} not found.\n    if (text.match(searchex) === null) {\n      return text;\n    }\n    // Replace callback for searchex results.\n    const replacecallback = (lang, match) => {\n      let blocklang = match.split(searchex)[1];\n      let blocktext = match.split(searchex)[2];\n      if (blocklang === lang) {\n        return blocktext;\n      } else {\n        return \"\";\n      }\n    };\n\n    // Get searchex results.\n    let result = text.replace(searchex, (match) => {\n      let lang = config.lang;\n      return replacecallback(lang, match);\n    });\n\n    // No results were found, return text in mlang other\n    if (result.length === 0) {\n      let mlangpattern = \"{mlang other}(.*?){mlang}\";\n      let mlangex = new RegExp(mlangpattern, \"dgis\");\n      let matches = text.match(mlangex);\n      if (matches[0].split(searchex)[2]) {\n        return matches[0].split(searchex)[2];\n      }\n    }\n\n    // Return the found string.\n    return result;\n  };\n\n  if (config.autotranslate) {\n    selectAll.disabled = false;\n  }\n\n  /**\n   * Validaate translation ck\n   */\n  // const validators = document.querySelectorAll(\"[data-key-validator]\");\n  const validators = document.querySelectorAll(Selectors.actions.validatorsBtns);\n  validators.forEach((e)=>{\n    // Get the stored data and do the saving from editors content\n    e.addEventListener('click', (e)=> {\n      let key = e.target.parentElement.dataset.keyValidator;\n      if (tempTranslations[key] === null || tempTranslations[key] === undefined) {\n        /**\n         * @todo do a UI feedback (disable save )\n         */\n        window.console.log(`Transaltion key \"${key}\" is undefined `);\n      } else {\n        saveTranslation(\n            key,\n            tempTranslations[key].editor,\n            tempTranslations[key].editor.innerHTML\n        );\n      }\n\n    });\n  });\n\n  /**\n   * Autotranslate Checkboxes\n   */\n  /*const checkboxes = document.querySelectorAll(\n    \".local-coursetranslator__checkbox\"\n  );*/\n  window.console.log(config, config.autotranslate, checkboxes);\n  if (config.autotranslate) {\n    checkboxes.forEach((e) => {\n      window.console.log(e);\n      e.disabled = false;\n    });\n  }\n  checkboxes.forEach((e) => {\n    e.addEventListener(\"change\", () => {\n      toggleAutotranslateButton();\n    });\n  });\n\n\n  /**\n   * Save Translation to Moodle\n   * @param  {String} key Data Key\n   * @param  {Node} editor HTML Editor Node\n   * @param  {String} text Updated Text\n   * @todo 3rd param is to refactor remove as it is the editors content\n   */\n  const saveTranslation = (key, editor, text) => {\n    // Get processing vars\n    let element = editor.closest(\".local-coursetranslator__editor\");\n    let id = element.getAttribute(\"data-id\");\n    let tid = element.getAttribute(\"data-tid\");\n    let table = element.getAttribute(\"data-table\");\n    let field = element.getAttribute(\"data-field\");\n\n    // Get the latest field data\n    let fielddata = {};\n    fielddata.courseid = config.courseid;\n    fielddata.id = parseInt(id);\n    fielddata.table = table;\n    fielddata.field = field;\n\n    // Get the latest data to parse text against.\n    ajax.call([\n      {\n        methodname: \"local_coursetranslator_get_field\",\n        args: {\n          data: [fielddata],\n        },\n        done: (data) => {\n          // The latests field text so multiple translators can work at the same time\n          let fieldtext = data[0].text;\n\n          // Field text exists\n          if (data.length > 0) {\n            // Updated hidden textarea with updatedtext\n            let textarea = document.querySelector(\n                Selectors.editors.multiples.textAreas\n                    .replace(\"<KEY>\", key));\n            // Get the updated text\n            let updatedtext = getupdatedtext(fieldtext, text);\n\n            // Build the data object\n            let tdata = {};\n            tdata.courseid = config.courseid;\n            tdata.id = parseInt(id);\n            tdata.tid = tid;\n            tdata.table = table;\n            tdata.field = field;\n            tdata.text = updatedtext;\n\n            // Success Message\n            const successMessage = () => {\n              editor.classList.add(\"local-coursetranslator__success\");\n              // Add saved indicator\n              let indicator =\n                `<div \n                   class=\"local-coursetranslator__success-message\" \n                   data-status=\"local-coursetranslator/success-message\" \n                   data-key=\"${key}\"\n                 >${config.autosavedmsg}</div>`;\n              editor.after(...stringToHTML(indicator));\n\n              let status = document.querySelector(\n                  Selectors.statuses.keys\n                      .replace(\"<KEY>\",key));\n              status.classList.replace(\"badge-danger\", \"badge-success\");\n              status.innerHTML = config.uptodate;\n\n              // Remove success message after a few seconds\n              setTimeout(() => {\n                let indicatorNode = document.querySelector(\n                    Selectors.statuses.successMessages\n                        .replace(\"<KEY>\",key));\n                editor.parentNode.removeChild(indicatorNode);\n              }, 3000);\n            };\n\n            // Error Mesage\n            const errorMessage = (error) => {\n              window.console.log(error);\n              editor.classList.add(\"local-coursetranslator__error\");\n            };\n\n            // Submit the request\n            ajax.call([\n              {\n                methodname: \"local_coursetranslator_update_translation\",\n                args: {\n                  data: [tdata],\n                },\n                done: (data) => {\n                  // Print response to console log\n                  if (config.debug > 0) {\n                    window.console.log(\"ws: \", key, data);\n                  }\n\n                  // Display success message\n                  if (data.length > 0) {\n                    successMessage();\n                    textarea.innerHTML = data[0].text;\n\n                    // Update source lang if necessary\n                    if (config.currentlang === config.lang) {\n                      document.querySelector(Selectors.sourcetexts.keys.replace('<KEY>', key))\n                          .innerHTML = text;\n                    }\n                  } else {\n                    // Something went wrong with the data\n                    errorMessage();\n                  }\n                },\n                fail: (error) => {\n                  // An error occurred\n                  errorMessage(error);\n                },\n              },\n            ]);\n          } else {\n            // Something went wrong with field retrieval\n            window.console.log(data);\n          }\n        },\n        fail: (error) => {\n          // An error occurred\n          window.console.log(error);\n        },\n      },\n    ]);\n  };\n\n  /**\n   * Update Textarea\n   * @param {string} fieldtext Latest text from database\n   * @param {string} text Text to update\n   * @returns {string}\n   */\n  const getupdatedtext = (fieldtext, text) => {\n    let lang = config.lang;\n\n    // Search for {mlang} not found.\n    let mlangtext = `{mlang ${lang}}${text}{mlang}`;\n\n    // Return new mlang text if mlang has not been used before\n    if (fieldtext.indexOf(\"{mlang\") === -1) {\n      if (lang === \"other\") {\n        return mlangtext;\n      } else {\n        return (\n          `{mlang other} ${fieldtext} {mlang}{mlang ${lang}} ${text} {mlang}`\n        );\n      }\n    }\n\n    // Use regex to replace the string\n    let pattern = `{*mlang +(${lang})}(.*?){*mlang*}`;\n    let replacex = new RegExp(pattern, \"dgis\");\n    let matches = fieldtext.match(replacex);\n\n    // Return the updated string\n    const updatedString = `{mlang ${lang}} ${text} {mlang}`;\n    if (matches) {\n      return fieldtext.replace(replacex, updatedString);\n    } else {\n      return fieldtext + updatedString;\n    }\n  };\n\n  /**\n   * Get the Translation using Moodle Web Service\n   * @returns void\n   */\n  window.addEventListener(\"load\", () => {\n    // document.querySelectorAll('.local-coursetranslator__editor [contenteditable=\"true\"]')\n    document.querySelectorAll(Selectors.editors.contentEditable)\n      .forEach((editor) => {\n        // Save translation\n        editor.addEventListener(\"focusout\", () => {\n          // Get Processing Information\n          let text = editor.innerHTML;\n          // let element = editor.closest(\".local-coursetranslator__editor\");\n          let element = editor.closest(Selectors.editors.all);\n          let key = element.getAttribute(\"data-key\");\n\n          saveTranslation(key, editor, text);\n        });\n        // Remove status classes\n        editor.addEventListener(\"click\", () => {\n          editor.classList.remove(\"local-coursetranslator__success\");\n          editor.classList.remove(\"local-coursetranslator__error\");\n        });\n      });\n  });\n\n  /**\n   * Get text from processing areas and add them to contenteditables\n   */\n  window.addEventListener(\"load\", () => {\n    let textareas = document.querySelectorAll(Selectors.editors.textarea);\n    textareas.forEach((textarea) => {\n      // Get relevent keys and text\n      let key = textarea.getAttribute(\"data-key\");\n      let text = textarea.innerHTML;\n      /**\n       * @todo review selector\n       */\n      let editor = document.querySelector(\n          Selectors.editors.multiples.contentEditableKeys\n              .replace(\"<KEY>\", key));\n\n      let langpattern = `{mlang ${config.lang}}(.*?){mlang}`;\n      let langex = new RegExp(langpattern, \"dgis\");\n      let matches = text.match(langex);\n\n      // Parse the text for mlang\n      let parsedtext = mlangparser(text);\n\n      if (matches && matches.length === 1) {\n        // Updated contenteditables with parsedtext\n        editor.innerHTML = parsedtext;\n      } else if (matches && matches.length > 1) {\n        //const dataKey = `data-key=\"${key}\"`;\n        document.querySelector(Selectors.editors.multiples.checkBoxesWithKey\n            .replace('<KEY>', key)).remove();\n        document.querySelector(Selectors.editors.multiples.editorChilds\n            .replace('<KEY>', key)).remove();\n        document.querySelector(Selectors.editors.multiples.textAreas\n            .replace('<KEY>', key)).remove();\n        let p = document.createElement(\"p\");\n        p.innerHTML = `<em><small>${config.multiplemlang}</small></em>`;\n        document.querySelector(Selectors.editors.multiples.editorsWithKey\n            .replace('<KEY>', key)).append(p);\n      } else {\n        editor.innerHTML = parsedtext;\n      }\n    });\n  });\n};\n\n/**\n * Eventlistener for show update checkbox\n * @param {Event} e\n */\nconst showUpdated = (e) =>{\n  let items = document.querySelectorAll(Selectors.statuses.updated);\n  if (e.target.checked) {\n    items.forEach((item) => {\n      item.classList.remove(\"d-none\");\n    });\n  } else {\n    items.forEach((item) => {\n      item.classList.add(\"d-none\");\n    });\n  }\n};\n\n/**\n * Event listener to switch target lang\n * @param {Event} e\n */\nconst switchLocale = (e) => {\n  let url = new URL(window.location.href);\n  let searchParams = url.searchParams;\n  searchParams.set(\"course_lang\", e.target.value);\n  let newUrl = url.toString();\n  window.location = newUrl;\n};\n\n/**\n * Event listener to check if update are needed\n * @param {Event} e\n */\nconst neededUpdate = (e)=> {\n  let items = document.querySelectorAll(Selectors.statuses.needsupdate);\n  if (e.target.checked) {\n    items.forEach((item) => {\n      item.classList.remove(\"d-none\");\n    });\n  } else {\n    items.forEach((item) => {\n      item.classList.add(\"d-none\");\n    });\n  }\n};\n\n/**\n * Launch autotranslation\n */\nconst doAutotranslate = () => {\n  document\n      // .querySelectorAll(\".local-coursetranslator__checkbox:checked\")\n      .querySelectorAll(Selectors.statuses.checkedCheckBoxes)\n      .forEach((ckBox) => {\n        let key = ckBox.getAttribute(\"data-key\");\n        getTranslation(key);\n      });\n};\n/**\n * Send for Translation to DeepL\n * @param {Integer} key Translation Key\n */\nconst getTranslation = (key) => {\n  // Store the key in the dictionary\n  tempTranslations[key] = {};\n  // Get the editor\n  let editor = findEditor(key);\n\n  // Get the source text\n  let sourceText = document.querySelector(Selectors.sourcetexts.keys.replace(\"<KEY>\",key))\n      .innerHTML;\n  // Initialize global dictionary with this key's editor\n  tempTranslations[key] = {\n    'editor': editor,\n    'source': sourceText,\n    'translation': ''\n  };\n  // Build formData\n  let formData = new FormData();\n  formData.append(\"text\", sourceText);\n  // FormData.append(\"source_lang\", \"en\");\n  formData.append(\"source_lang\", config.currentlang);\n  formData.append(\"target_lang\", config.lang);\n  formData.append(\"preserve_formatting\", 1);\n  formData.append(\"auth_key\", config.apikey);\n  formData.append(\"tag_handling\", \"xml\");\n  formData.append(\"split_sentences\", \"nonewlines\");\n  // Window.console.log(config.currentlang);\n  // window.console.log(\"Send deepl:\", formData);\n  // Update the translation\n  let xhr = new XMLHttpRequest();\n  xhr.onreadystatechange = () => {\n    if (xhr.readyState === XMLHttpRequest.DONE) {\n      const status = xhr.status;\n      if (status === 0 || (status >= 200 && status < 400)) {\n        // The request has been completed successfully\n        let data = JSON.parse(xhr.responseText);\n        window.console.log(\"deepl:\", key, data);\n        // Window.console.log(config.currentlang);\n        // window.console.log(editor);\n        // Display translation\n        editor.innerHTML = data.translations[0].text;\n        // Save translation\n        // saveTranslation(key, editor, data.translations[0].text);\n        // store the translation in the global object\n        tempTranslations[key].translation = data.translations[0].text;\n      } else {\n        // Oh no! There has been an error with the request!\n        window.console.log(\"error\", status);\n      }\n    }\n  };\n  xhr.open(\"POST\", config.deeplurl);\n  xhr.send(formData);\n};\n/**\n * Get the editor container based on recieved current user's\n * editor preference.\n * @param {Integer} key Translation Key\n */\nconst findEditor = (key) => {\n  // Let q = '';\n  // window.console.log(\"document.querySelector('\" + q + \"')\");\n  // window.console.log(\"editors pref : \" + editorType);\n  switch (editorType) {\n    case \"atto\" :\n      return document.querySelector(\n          Selectors.editors.types.atto\n              .replace(\"<KEY>\",key));\n    case \"tiny\":\n      return document.querySelector(Selectors.editors.types.tiny\n          .replace(\"<KEY>\",key))\n          .contentWindow.tinymce;\n    case 'marklar':\n    case \"textarea\" :\n      return document.querySelector(Selectors.editors.types.other\n          .replace(\"<KEY>\",key));\n  }\n};\n/**\n *\n * @param {Event} e\n */\nconst selectAll = (e)=>{\n  // See if select all is checked\n  let checked = e.target.checked;\n\n  // Check/uncheck checkboxes\n  if (checked) {\n    checkboxes.forEach((e) => {\n      e.checked = true;\n    });\n  } else {\n    checkboxes.forEach((e) => {\n      e.checked = false;\n    });\n  }\n  toggleAutotranslateButton();\n};\n/**\n * Toggle Autotranslate Button\n */\nconst toggleAutotranslateButton = () => {\n  let checkboxItems = [];\n  checkboxes.forEach((e) => {\n    checkboxItems.push(e.checked);\n  });\n  let checked = checkboxItems.find((checked) => checked === true)\n      ? true\n      : false;\n  if (config.autotranslate && checked) {\n    autotranslateButton.disabled = false;\n  } else {\n    autotranslateButton.disabled = true;\n  }\n};\n"],"names":["tempTranslations","editorType","config","autotranslateButton","checkboxes","cfg","userPrefs","document","querySelector","Selectors","actions","autoTranslateBtn","querySelectorAll","checkBoxes","window","console","log","statuses","checkedCheckBoxes","addEventListener","e","target","closest","localeSwitcher","switchLocale","showUpdated","showNeedUpdate","neededUpdate","doAutotranslate","selecAllBtn","selectAll","searchex","mlangparser","text","match","result","replace","lang","blocklang","split","blocktext","replacecallback","length","mlangex","RegExp","matches","autotranslate","disabled","validatorsBtns","forEach","key","parentElement","dataset","keyValidator","undefined","saveTranslation","editor","innerHTML","toggleAutotranslateButton","element","id","getAttribute","tid","table","field","fielddata","courseid","parseInt","call","methodname","args","data","done","fieldtext","textarea","editors","multiples","textAreas","updatedtext","getupdatedtext","tdata","successMessage","classList","add","indicator","autosavedmsg","after","string","parser","DOMParser","parseFromString","err","body","childNodes","dom","createElement","stringToHTML","status","keys","uptodate","setTimeout","indicatorNode","successMessages","parentNode","removeChild","errorMessage","error","debug","currentlang","sourcetexts","fail","mlangtext","indexOf","replacex","updatedString","contentEditable","all","remove","contentEditableKeys","langpattern","langex","parsedtext","checkBoxesWithKey","editorChilds","p","multiplemlang","editorsWithKey","append","items","updated","checked","item","url","URL","location","href","searchParams","set","value","newUrl","toString","needsupdate","ckBox","getTranslation","findEditor","sourceText","formData","FormData","apikey","xhr","XMLHttpRequest","onreadystatechange","readyState","DONE","JSON","parse","responseText","translations","translation","open","deeplurl","send","types","atto","tiny","contentWindow","tinymce","other","checkboxItems","push","find"],"mappings":"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"}