{"version":3,"file":"coursetranslator.min.js","sources":["../src/coursetranslator.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @module     local_coursetranslator/coursetranslator\n * @copyright  2022 Kaleb Heitzman <kaleb@jamfire.io>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n// import libs\nimport ajax from \"core/ajax\";\nimport Selectors from \"./selectors\";\nimport Modal from 'core/modal';\n// Initialize the temporary translations dictionary @todo make external class\nlet tempTranslations = {};\nlet editorType = '';\nlet config = {};\nlet autotranslateButton = {};\nlet checkboxes = [];\n\nconst registerEventListeners = ()=>{\n  document.addEventListener('change', e=>{\n    if (e.target.closest(Selectors.actions.targetSwitcher)) {\n      switchTarget(e);\n    }\n    if (e.target.closest(Selectors.actions.sourceSwitcher)) {\n      switchSource(e);\n    }\n    if (e.target.closest(Selectors.actions.showUpdated)) {\n      showUpdated(e);\n    }\n    if (e.target.closest(Selectors.actions.showNeedUpdate)) {\n      neededUpdate(e);\n    }\n  });\n  document.addEventListener('click', e=>{\n    if (e.target.closest(Selectors.actions.autoTranslateBtn)) {\n      if (config.currentlang == config.lang || config.lang == undefined) {\n        Modal.create({\n          title: 'Cannot call deepl',\n          body: `<p>Both languges are the same {$config.lang}</p>`,\n          show: true,\n          removeOnClose: true,\n        });\n      } else {\n        doAutotranslate(e);\n      }\n    }\n    if (e.target.closest(Selectors.actions.selecAllBtn)) {\n      selectAll(e);\n    }\n  });\n};\nconst registerUI = ()=>{\n  autotranslateButton = document.querySelector(Selectors.actions.autoTranslateBtn);\n  checkboxes = document.querySelectorAll(Selectors.actions.checkBoxes);\n  window.console.log(Selectors.statuses.checkedCheckBoxes);\n};\n\n/**\n * Translation Editor UI\n * @param {Object} cfg JS Config\n */\nexport const init = (cfg) => {\n  config = cfg;\n  window.console.log(config);\n  editorType = config.userPrefs;\n\n  registerUI();\n  registerEventListeners();\n\n  /**\n   * Convert a template string into HTML DOM nodes\n   * @param  {String} string The template string\n   * @return {Node}       The template HTML\n   */\n  const stringToHTML = (string) => {\n    // See if DOMParser is supported\n    let parser;\n    const support = (() => {\n      if (!window.DOMParser) {\n        return false;\n      }\n      parser = new DOMParser();\n      try {\n        parser.parseFromString(\"x\", \"text/html\");\n      } catch (err) {\n        return false;\n      }\n      return true;\n    })();\n    // If DOMParser is supported, use it\n    if (support) {\n      parser = new DOMParser();\n      const doc = parser.parseFromString(string, \"text/html\");\n      return doc.body.childNodes;\n    }\n    // Otherwise, fallback to old-school method\n    const dom = document.createElement(\"div\");\n    dom.innerHTML = string;\n    return dom;\n  };\n\n  /**\n   * {mlang} searchex regex\n   */\n  const searchex =\n    /{\\s*mlang\\s+((?:[a-z0-9_-]+)(?:\\s*,\\s*[a-z0-9_-]+\\s*)*)\\s*}(.*?){\\s*mlang\\s*}/dgis;\n\n  /**\n   * Search for mlang tags\n   *\n   * The code for this js parser was adapted from filter/multilang2\n   *\n   * @param {string} text Text with {mlang}\n   * @returns {string}\n   */\n  const mlangparser = (text) => {\n    // Search for {mlang} not found.\n    if (text.match(searchex) === null) {\n      return text;\n    }\n    // Replace callback for searchex results.\n    const replacecallback = (lang, match) => {\n      let blocklang = match.split(searchex)[1];\n      let blocktext = match.split(searchex)[2];\n      if (blocklang === lang) {\n        return blocktext;\n      } else {\n        return \"\";\n      }\n    };\n\n    // Get searchex results.\n    let result = text.replace(searchex, (match) => {\n      let lang = config.lang;\n      return replacecallback(lang, match);\n    });\n\n    // No results were found, return text in mlang other\n    if (result.length === 0) {\n      let mlangpattern = \"{mlang other}(.*?){mlang}\";\n      let mlangex = new RegExp(mlangpattern, \"dgis\");\n      let matches = text.match(mlangex);\n      if (matches[0].split(searchex)[2]) {\n        return matches[0].split(searchex)[2];\n      }\n    }\n\n    // Return the found string.\n    return result;\n  };\n\n  if (config.autotranslate) {\n    selectAll.disabled = false;\n  }\n\n  /**\n   * Validaate translation ck\n   */\n  // const validators = document.querySelectorAll(\"[data-key-validator]\");\n  const validators = document.querySelectorAll(Selectors.actions.validatorsBtns);\n  validators.forEach((e)=>{\n    // Get the stored data and do the saving from editors content\n    e.addEventListener('click', (e)=> {\n      let key = e.target.parentElement.dataset.keyValidator;\n      //window.console.log(key, \"save\");\n      if (tempTranslations[key] === null || tempTranslations[key] === undefined) {\n        /**\n         * @todo do a UI feedback (disable save )\n         */\n        window.console.log(`Transaltion key \"${key}\" is undefined `);\n      } else {\n        saveTranslation(\n            key,\n            tempTranslations[key].editor,\n            tempTranslations[key].editor.innerHTML\n        );\n      }\n\n    });\n  });\n\n  /**\n   * Autotranslate Checkboxes\n   */\n  /* const checkboxes = document.querySelectorAll(\n    \".local-coursetranslator__checkbox\"\n  );*/\n  // window.console.log(config, config.autotranslate, checkboxes);\n  if (config.autotranslate) {\n    checkboxes.forEach((e) => {\n      // Window.console.log(e);\n      e.disabled = false;\n    });\n  }\n  checkboxes.forEach((e) => {\n    e.addEventListener(\"change\", () => {\n      toggleAutotranslateButton();\n    });\n  });\n\n\n  /**\n   * Save Translation to Moodle\n   * @param  {String} key Data Key\n   * @param  {Node} editor HTML Editor Node\n   * @param  {String} text Updated Text\n   * @todo 3rd param is to refactor remove as it is the editors content\n   */\n  const saveTranslation = (key, editor, text) => {\n    window.console.log(key);\n    // Get processing vars\n    //let element = editor.closest(Selectors.editors.all);\n    let selector =Selectors.editors.multiples.editorsWithKey.replace(\"<KEY>\", key);\n    window.console.log(selector);\n    window.console.log(document.querySelector(selector));\n    let element = document.querySelector(selector);\n    let id = element.getAttribute(\"data-id\");\n    let tid = element.getAttribute(\"data-tid\");\n    let table = element.getAttribute(\"data-table\");\n    let field = element.getAttribute(\"data-field\");\n\n    // Get the latest field data\n    let fielddata = {};\n    fielddata.courseid = config.courseid;\n    fielddata.id = parseInt(id);\n    fielddata.table = table;\n    fielddata.field = field;\n\n    // Get the latest data to parse text against.\n    ajax.call([\n      {\n        methodname: \"local_coursetranslator_get_field\",\n        args: {\n          data: [fielddata],\n        },\n        done: (data) => {\n          window.console.log(data);\n          // The latests field text so multiple translators can work at the same time\n          let fieldtext = data[0].text;\n\n          // Field text exists\n          if (data.length > 0) {\n            // Updated hidden textarea with updatedtext\n            let textarea = document.querySelector(\n                Selectors.editors.multiples.textAreas\n                    .replace(\"<KEY>\", key));\n            // Get the updated text\n            let updatedtext = getupdatedtext(fieldtext, text);\n\n            // Build the data object\n            let tdata = {};\n            tdata.courseid = config.courseid;\n            tdata.id = parseInt(id);\n            tdata.tid = tid;\n            tdata.table = table;\n            tdata.field = field;\n            tdata.text = updatedtext;\n            // Success Message\n            const successMessage = () => {\n              /** @todo simplify by just changing the css rather than messing up with the makup*/\n              //editor.classList.add(\"local-coursetranslator__success\");\n              element.classList.add(\"local-coursetranslator__success\");\n              // Add saved indicator\n              let indicator =\n                `<div \n                   class=\"local-coursetranslator__success-message\" \n                   data-status=\"local-coursetranslator/success-message\" \n                   data-key=\"${key}\"\n                 >${config.autosavedmsg}</div>`;\n              element.after(...stringToHTML(indicator));\n\n              let status = document.querySelector(\n                  Selectors.statuses.keys\n                      .replace(\"<KEY>\", key));\n              status.classList.replace(\"badge-danger\", \"badge-success\");\n              status.innerHTML = config.uptodate;\n\n              // Remove success message after a few seconds\n              setTimeout(() => {\n                let indicatorNode = document.querySelector(\n                    Selectors.statuses.successMessages\n                        .replace(\"<KEY>\", key));\n                element.parentNode.removeChild(indicatorNode);\n              }, 3000);\n            };\n\n            // Error Mesage\n            const errorMessage = (error) => {\n              window.console.log(error);\n              editor.classList.add(\"local-coursetranslator__error\");\n            };\n\n            // Submit the request\n            ajax.call([\n              {\n                methodname: \"local_coursetranslator_update_translation\",\n                args: {\n                  data: [tdata],\n                },\n                done: (data) => {\n                  // Print response to console log\n                  if (config.debug > 0) {\n                    window.console.log(\"ws: \", key, data);\n                  }\n\n                  // Display success message\n                  if (data.length > 0) {\n                    successMessage();\n                    textarea.innerHTML = data[0].text;\n\n                    // Update source lang if necessary\n                    if (config.currentlang === config.lang) {\n                      document.querySelector(Selectors.sourcetexts.keys.replace('<KEY>', key))\n                          .innerHTML = text;\n                    }\n                  } else {\n                    // Something went wrong with the data\n                    errorMessage();\n                  }\n                },\n                fail: (error) => {\n                  // An error occurred\n                  errorMessage(error);\n                },\n              },\n            ]);\n          } else {\n            // Something went wrong with field retrieval\n            window.console.log(data);\n          }\n        },\n        fail: (error) => {\n          // An error occurred\n          window.console.log(error);\n        },\n      },\n    ]);\n  };\n\n  /**\n   * Update Textarea\n   * @param {string} fieldtext Latest text from database\n   * @param {string} text Text to update\n   * @returns {string}\n   */\n  const getupdatedtext = (fieldtext, text) => {\n    let lang = config.lang;\n\n    // Search for {mlang} not found.\n    let mlangtext = `{mlang ${lang}}${text}{mlang}`;\n\n    // Return new mlang text if mlang has not been used before\n    if (fieldtext.indexOf(\"{mlang\") === -1) {\n      if (lang === \"other\") {\n        return mlangtext;\n      } else {\n        return (\n          `{mlang other} ${fieldtext} {mlang}{mlang ${lang}} ${text} {mlang}`\n        );\n      }\n    }\n\n    // Use regex to replace the string\n    let pattern = `{*mlang +(${lang})}(.*?){*mlang*}`;\n    let replacex = new RegExp(pattern, \"dgis\");\n    let matches = fieldtext.match(replacex);\n\n    // Return the updated string\n    const updatedString = `{mlang ${lang}} ${text} {mlang}`;\n    if (matches) {\n      return fieldtext.replace(replacex, updatedString);\n    } else {\n      return fieldtext + updatedString;\n    }\n  };\n\n  /**\n   * Get the Translation using Moodle Web Service\n   * @returns void\n   */\n  window.addEventListener(\"load\", () => {\n    // Document.querySelectorAll('.local-coursetranslator__editor [contenteditable=\"true\"]')\n    document.querySelectorAll(Selectors.editors.contentEditable)\n      .forEach((editor) => {\n        // Save translation\n        editor.addEventListener(\"focusout\", () => {\n          return;\n          // Get Processing Information\n          let text = editor.innerHTML;\n          // Let element = editor.closest(\".local-coursetranslator__editor\");\n          let element = editor.closest(Selectors.editors.all);\n          let key = element.getAttribute(\"data-key\");\n\n          saveTranslation(key, editor, text);\n        });\n        // Remove status classes\n        editor.addEventListener(\"click\", () => {\n          editor.classList.remove(\"local-coursetranslator__success\");\n          editor.classList.remove(\"local-coursetranslator__error\");\n        });\n      });\n  });\n\n  /**\n   * Get text from processing areas and add them to contenteditables\n   */\n  window.addEventListener(\"load\", () => {\n    let textareas = document.querySelectorAll(Selectors.editors.textarea);\n    textareas.forEach((textarea) => {\n      // Get relevent keys and text\n      let key = textarea.getAttribute(\"data-key\");\n      let text = textarea.innerHTML;\n      /**\n       * @todo review selector\n       */\n      let editor = document.querySelector(\n          Selectors.editors.multiples.contentEditableKeys\n              .replace(\"<KEY>\", key));\n\n      let langpattern = `{mlang ${config.lang}}(.*?){mlang}`;\n      let langex = new RegExp(langpattern, \"dgis\");\n      let matches = text.match(langex);\n\n      // Parse the text for mlang\n      let parsedtext = mlangparser(text);\n\n      if (matches && matches.length === 1) {\n        // Updated contenteditables with parsedtext\n        editor.innerHTML = parsedtext;\n      } else if (matches && matches.length > 1) {\n        // Const dataKey = `data-key=\"${key}\"`;\n        document.querySelector(Selectors.editors.multiples.checkBoxesWithKey\n            .replace('<KEY>', key)).remove();\n        document.querySelector(Selectors.editors.multiples.editorChilds\n            .replace('<KEY>', key)).remove();\n        document.querySelector(Selectors.editors.multiples.textAreas\n            .replace('<KEY>', key)).remove();\n        let p = document.createElement(\"p\");\n        p.innerHTML = `<em><small>${config.multiplemlang}</small></em>`;\n        document.querySelector(Selectors.editors.multiples.editorsWithKey\n            .replace('<KEY>', key)).append(p);\n      } else {\n        editor.innerHTML = parsedtext;\n      }\n    });\n  });\n};\n\n/**\n * Eventlistener for show update checkbox\n * @param {Event} e\n */\nconst showUpdated = (e) =>{\n  let items = document.querySelectorAll(Selectors.statuses.updated);\n  if (e.target.checked) {\n    items.forEach((item) => {\n      item.classList.remove(\"d-none\");\n    });\n  } else {\n    items.forEach((item) => {\n      item.classList.add(\"d-none\");\n    });\n  }\n};\n\n/**\n * Event listener to switch target lang\n * @param {Event} e\n */\nconst switchTarget = (e) => {\n  window.console.info('switchTarget');\n  let url = new URL(window.location.href);\n  let searchParams = url.searchParams;\n  searchParams.set(\"target_lang\", e.target.value);\n  let newUrl = url.toString();\n  window.location = newUrl;\n};\n/**\n * Event listener to switch source lang\n * Hence reload the page and change the site main lang\n * @param {Event} e\n */\nconst switchSource = (e) => {\n  window.console.info('switchSource');\n  let url = new URL(window.location.href);\n  let searchParams = url.searchParams;\n  searchParams.set(\"lang\", e.target.value);\n  let newUrl = url.toString();\n  window.location = newUrl;\n};\n/**\n * Event listener to check if update are needed\n * @param {Event} e\n */\nconst neededUpdate = (e)=> {\n  window.console.info(\"Need update toggled\");\n  window.console.info(\"source_lang\", config.currentlang);\n  window.console.info(\"target_lang\", config.lang);\n\n  let items = document.querySelectorAll(Selectors.statuses.needsupdate);\n  if (e.target.checked) {\n    items.forEach((item) => {\n      item.classList.remove(\"d-none\");\n    });\n  } else {\n    items.forEach((item) => {\n      item.classList.add(\"d-none\");\n    });\n  }\n};\n\n/**\n * Launch autotranslation\n * @todo should do in call to the API\n */\nconst doAutotranslate = () => {\n  document\n      // .querySelectorAll(\".local-coursetranslator__checkbox:checked\")\n      .querySelectorAll(Selectors.statuses.checkedCheckBoxes)\n      .forEach((ckBox) => {\n        let key = ckBox.getAttribute(\"data-key\");\n        getTranslation(key);\n      });\n};\n/**\n * @todo extract images ALT tags to send for translation\n * Send for Translation to DeepL\n * @param {Integer} key Translation Key\n */\nconst getTranslation = (key) => {\n  // Store the key in the dictionary\n  tempTranslations[key] = {};\n  // Get the editor\n  let editor = findEditor(key);\n\n  // Get the source text\n  let sourceText = document.querySelector(Selectors.sourcetexts.keys.replace(\"<KEY>\", key)).getAttribute(\"data-sourcetext-raw\");\n/*  Let sourceText = document.querySelector(Selectors.sourcetexts.keys.replace(\"<KEY>\",key))\n      .innerHTML;*/\n  // window.console.log(sourceText);\n  // Initialize global dictionary with this key's editor\n  tempTranslations[key] = {\n    'editor': editor,\n    'source': sourceText,\n    'translation': ''\n  };\n  window.console.log(tempTranslations);\n  // Build formData\n  let formData = new FormData();\n  formData.append(\"text\", sourceText);\n  // FormData.append(\"source_lang\", \"en\");\n  formData.append(\"source_lang\", config.currentlang.toUpperCase());\n  formData.append(\"target_lang\", config.lang.toUpperCase());\n  formData.append(\"auth_key\", config.apikey);\n  formData.append(\"tag_handling\", document.querySelector(Selectors.deepl.tag_handling).checked ? 'html' : 'xml');//\n  formData.append(\"context\", document.querySelector(Selectors.deepl.context).value ?? null); //\n  formData.append(\"split_sentences\", document.querySelector(Selectors.deepl.split_sentences).value);//\n  formData.append(\"preserve_formatting\", document.querySelector(Selectors.deepl.preserve_formatting).checked);//\n  formData.append(\"formality\", document.querySelector(Selectors.deepl.formality).value);//\n  formData.append(\"glossary_id\", document.querySelector(Selectors.deepl.glossary_id).value);//\n  formData.append(\"outline_detection\", document.querySelector(Selectors.deepl.outline_detection).checked);//\n  formData.append(\"non_splitting_tags\", toJsonArray(document.querySelector(Selectors.deepl.non_splitting_tags).value));\n  formData.append(\"splitting_tags\", toJsonArray(document.querySelector(Selectors.deepl.splitting_tags).value));\n  formData.append(\"ignore_tags\", toJsonArray(document.querySelector(Selectors.deepl.ignore_tags).value));\n\n  // Window.console.log(config.currentlang);\n   window.console.log(\"Send deepl:\", formData);\n  // Update the translation\n  let xhr = new XMLHttpRequest();\n  xhr.onreadystatechange = () => {\n    if (xhr.readyState === XMLHttpRequest.DONE) {\n      const status = xhr.status;\n      if (status === 0 || (status >= 200 && status < 400)) {\n        // The request has been completed successfully\n        let data = JSON.parse(xhr.responseText);\n        window.console.log(\"deepl:\", key, data);\n        // Window.console.log(config.currentlang);\n        // window.console.log(editor);\n        // Display translation\n        editor.innerHTML = data.translations[0].text;\n        // Save translation\n        // saveTranslation(key, editor, data.translations[0].text);\n        // store the translation in the global object\n        tempTranslations[key].translation = data.translations[0].text;\n      } else {\n        // Oh no! There has been an error with the request!\n        window.console.log(\"error\", status);\n      }\n    }\n  };\n   xhr.open(\"POST\", config.deeplurl);\n   xhr.send(formData);\n};\n/**\n * Get the editor container based on recieved current user's\n * editor preference.\n * @param {Integer} key Translation Key\n */\nconst findEditor = (key) => {\n  // Let q = '';\n  // window.console.log(\"document.querySelector('\" + q + \"')\");\n  // window.console.log(\"editors pref : \" + editorType);\n  switch (editorType) {\n    case \"atto\" :\n      return document.querySelector(\n          Selectors.editors.types.atto\n              .replace(\"<KEY>\", key));\n    case \"tiny\":\n      return document.querySelector(Selectors.editors.types.tiny\n          .replace(\"<KEY>\", key))\n          .contentWindow.tinymce;\n    case 'marklar':\n    case \"textarea\" :\n      return document.querySelector(Selectors.editors.types.other\n          .replace(\"<KEY>\", key));\n  }\n};\n/**\n *\n * @param {Event} e\n */\nconst selectAll = (e)=>{\n  // See if select all is checked\n  let checked = e.target.checked;\n\n  // Check/uncheck checkboxes\n  if (checked) {\n    checkboxes.forEach((e) => {\n      e.checked = true;\n    });\n  } else {\n    checkboxes.forEach((e) => {\n      e.checked = false;\n    });\n  }\n  toggleAutotranslateButton();\n};\n/**\n * Toggle Autotranslate Button\n */\nconst toggleAutotranslateButton = () => {\n  let checkboxItems = [];\n  checkboxes.forEach((e) => {\n    checkboxItems.push(e.checked);\n  });\n  let checked = checkboxItems.find((checked) => checked === true)\n      ? true\n      : false;\n  if (config.autotranslate && checked) {\n    autotranslateButton.disabled = false;\n  } else {\n    autotranslateButton.disabled = true;\n  }\n};\nconst toJsonArray = (s, sep = \",\") => {\n  return JSON.stringify(s.split(sep));\n};\n"],"names":["tempTranslations","editorType","config","autotranslateButton","checkboxes","cfg","window","console","log","userPrefs","document","querySelector","Selectors","actions","autoTranslateBtn","querySelectorAll","checkBoxes","statuses","checkedCheckBoxes","addEventListener","e","target","closest","targetSwitcher","switchTarget","sourceSwitcher","switchSource","showUpdated","showNeedUpdate","neededUpdate","currentlang","lang","undefined","create","title","body","show","removeOnClose","doAutotranslate","selecAllBtn","selectAll","searchex","mlangparser","text","match","result","replace","blocklang","split","blocktext","replacecallback","length","mlangex","RegExp","matches","autotranslate","disabled","validatorsBtns","forEach","key","parentElement","dataset","keyValidator","saveTranslation","editor","innerHTML","toggleAutotranslateButton","selector","editors","multiples","editorsWithKey","element","id","getAttribute","tid","table","field","fielddata","courseid","parseInt","call","methodname","args","data","done","fieldtext","textarea","textAreas","updatedtext","getupdatedtext","tdata","successMessage","classList","add","indicator","autosavedmsg","after","string","parser","DOMParser","parseFromString","err","childNodes","dom","createElement","stringToHTML","status","keys","uptodate","setTimeout","indicatorNode","successMessages","parentNode","removeChild","errorMessage","error","debug","sourcetexts","fail","mlangtext","indexOf","replacex","updatedString","contentEditable","remove","contentEditableKeys","langpattern","langex","parsedtext","checkBoxesWithKey","editorChilds","p","multiplemlang","append","items","updated","checked","item","info","url","URL","location","href","searchParams","set","value","newUrl","toString","needsupdate","ckBox","getTranslation","findEditor","sourceText","formData","FormData","toUpperCase","apikey","deepl","tag_handling","context","split_sentences","preserve_formatting","formality","glossary_id","outline_detection","toJsonArray","non_splitting_tags","splitting_tags","ignore_tags","xhr","XMLHttpRequest","onreadystatechange","readyState","DONE","JSON","parse","responseText","translations","translation","open","deeplurl","send","types","atto","tiny","contentWindow","tinymce","other","checkboxItems","push","find","s","sep","stringify"],"mappings":"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"}