{"version":3,"file":"coursetranslator.min.js","sources":["../src/coursetranslator.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @module     local_coursetranslator/coursetranslator\n * @copyright  2022 Kaleb Heitzman <kaleb@jamfire.io>\n * @copyright  2024 Bruno Baudry <bruno.baudry@bfh.ch>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n// Import libs\nimport ajax from \"core/ajax\";\nimport Selectors from \"./selectors\";\nimport Modal from 'core/modal';\n// Initialize the temporary translations dictionary @todo make external class\nlet tempTranslations = {};\nlet mainEditorType = '';\nlet config = {};\nlet autotranslateButton = {};\nlet checkboxes = [];\nlet sourceLang = \"\";\nlet targetLang = \"\";\n\nconst registerEventListeners = () => {\n\n    document.addEventListener('change', e => {\n        if (e.target.closest(Selectors.actions.targetSwitcher)) {\n            switchTarget(e);\n        }\n        if (e.target.closest(Selectors.actions.sourceSwitcher)) {\n            switchSource(e);\n        }\n        if (e.target.closest(Selectors.actions.showUpdated)) {\n            showRows(Selectors.statuses.updated, e.target.checked);\n        }\n        if (e.target.closest(Selectors.actions.showNeedUpdate)) {\n            showRows(Selectors.statuses.needsupdate, e.target.checked);\n        }\n        if (e.target.closest(Selectors.actions.checkBoxes)) {\n            onItemChecked(e);\n        }\n    });\n    document.addEventListener('click', e => {\n        if (e.target.closest(Selectors.actions.toggleMultilang)) {\n            onToggleMultilang(e.target.closest(Selectors.actions.toggleMultilang));\n        }\n        if (e.target.closest(Selectors.actions.autoTranslateBtn)) {\n            if (config.currentlang === config.lang || config.lang === undefined) {\n                Modal.create({\n                    title: 'Cannot call deepl',\n                    body: `<p>Both languges are the same {$config.lang}</p>`,\n                    show: true,\n                    removeOnClose: true,\n                });\n            } else {\n                doAutotranslate();\n            }\n        }\n        if (e.target.closest(Selectors.actions.selectAllBtn)) {\n            toggleAllCheckboxes(e);\n        }\n    });\n\n};\nconst registerUI = () => {\n    try {\n        autotranslateButton = document.querySelector(Selectors.actions.autoTranslateBtn);\n        checkboxes = document.querySelectorAll(Selectors.actions.checkBoxes);\n        sourceLang = document.querySelector(Selectors.actions.sourceSwitcher).value;\n        targetLang = document.querySelector(Selectors.actions.targetSwitcher).value;\n    } catch (e) {\n        if (config.debug) {\n            window.console.error(e.message);\n        }\n    } finally {\n    }\n};\n\n/**\n * Translation Editor UI\n * @param {Object} cfg JS Config\n */\nexport const init = (cfg) => {\n    config = cfg;\n    if (config.debug > 0) {\n        window.console.info(config);\n    }\n    mainEditorType = config.userPrefs;\n    // Setup\n    registerUI();\n    registerEventListeners();\n    toggleAutotranslateButton();\n    const selectAllBtn = document.querySelector(Selectors.actions.selectAllBtn);\n    selectAllBtn.disabled = sourceLang === targetLang;\n    /**\n     * Validaate translation ck\n     */\n    const validators = document.querySelectorAll(Selectors.actions.validatorsBtns);\n    validators.forEach((e) => {\n        // Get the stored data and do the saving from editors content\n        e.addEventListener('click', (e) => {\n            let key = e.target.parentElement.dataset.keyValidator;\n            if (tempTranslations[key] === null || tempTranslations[key] === undefined) {\n                /**\n                 * @todo do a UI feedback (disable save )\n                 */\n                window.console.log(`Transaltion key \"${key}\" is undefined `);\n            } else {\n                saveTranslation(\n                    key,\n                    tempTranslations[key].editor,\n                    tempTranslations[key].editor.innerHTML\n                );\n            }\n\n        });\n    });\n\n    /**\n     * Autotranslate Checkboxes\n     */\n    if (config.autotranslate) {\n        checkboxes.forEach((e) => {\n            e.disabled = sourceLang === targetLang;\n        });\n    }\n    checkboxes.forEach((e) => {\n        e.addEventListener(\"click\", () => {\n            toggleAutotranslateButton();\n        });\n    });\n\n\n    /**\n     * Save Translation to Moodle\n     * @param  {String} key Data Key\n     * @param  {Node} editor HTML Editor Node\n     * @param  {String} text Updated Text\n     * @todo 3rd param is to refactor remove as it is the editors content\n     */\n    const saveTranslation = (key, editor, text) => {\n        // Get processing vars\n        let icon = document.querySelector(replaceKey(Selectors.actions.validatorIcon, key));\n        let selector = Selectors.editors.multiples.editorsWithKey.replace(\"<KEY>\", key);\n        let element = document.querySelector(selector);\n        let id = element.getAttribute(\"data-id\");\n        let tid = element.getAttribute(\"data-tid\");\n        let table = element.getAttribute(\"data-table\");\n        let field = element.getAttribute(\"data-field\");\n\n        // Get the latest field data\n        let fielddata = {};\n        fielddata.courseid = config.courseid;\n        fielddata.id = parseInt(id);\n        fielddata.table = table;\n        fielddata.field = field;\n        if (config.debug > 0) {\n            window.console.log(fielddata);\n        }\n        // Get the latest data to parse text against.\n        ajax.call([\n            {\n                methodname: \"local_coursetranslator_get_field\",\n                args: {\n                    data: [fielddata],\n                },\n                done: (data) => {\n                    // The latests field text so multiple translators can work at the same time\n                    let fieldtext = data[0].text;\n\n                    // Field text exists\n                    if (data.length > 0) {\n                        // Updated hidden textarea with updatedtext\n                        let textarea = document.querySelector(\n                            Selectors.editors.multiples.textAreas\n                                .replace(\"<KEY>\", key));\n                        // Get the updated text\n                        let updatedtext = getupdatedtext(fieldtext, text);\n\n                        // Build the data object\n                        let tdata = {};\n                        tdata.courseid = config.courseid;\n                        tdata.id = parseInt(id);\n                        tdata.tid = tid;\n                        tdata.table = table;\n                        tdata.field = field;\n                        tdata.text = updatedtext;\n                        if (config.debug > 0) {\n                            window.console.log(tdata);\n                        }\n                        // Success Message\n                        const successMessage = () => {\n                            element.classList.add(\"local-coursetranslator__success\");\n                            // Add saved indicator\n                            icon.setAttribute('role', 'status');\n                            icon.setAttribute('data-status', \"local-coursetranslator/success\");\n                            // Remove success message after a few seconds\n                            setTimeout(() => {\n                                icon.setAttribute('data-status', \"local-coursetranslator/saved\");\n                            });\n                        };\n\n                        // Error Mesage\n                        const errorMessage = (error) => {\n                            editor.classList.add(\"local-coursetranslator__error\");\n                            icon.setAttribute('role', 'status');\n                            icon.setAttribute('data-status', \"local-coursetranslator/failed\");\n                            if (error) {\n                                textarea.innerHTML = error;\n                            }\n                        };\n\n                        // Submit the request\n                        ajax.call([\n                            {\n                                methodname: \"local_coursetranslator_update_translation\",\n                                args: {\n                                    data: [tdata],\n                                },\n                                done: (data) => {\n                                    // Print response to console log\n                                    if (config.debug > 0) {\n                                        window.console.log(\"ws: \", key, data);\n                                    }\n\n                                    // Display success message\n                                    if (data.length > 0) {\n                                        successMessage();\n                                        textarea.innerHTML = data[0].text;\n\n                                        // Update source lang if necessary\n                                        if (config.currentlang === config.lang) {\n                                            document.querySelector(Selectors.sourcetexts.keys.replace('<KEY>', key))\n                                                .innerHTML = text;\n                                        }\n                                    } else {\n                                        // Something went wrong with the data\n                                        errorMessage();\n                                    }\n                                },\n                                fail: (error) => {\n                                    // An error occurred\n                                    errorMessage(error);\n                                },\n                            },\n                        ]);\n                    } else {\n                        // Something went wrong with field retrieval\n                        window.console.log(data);\n                    }\n                },\n                fail: (error) => {\n                    // An error occurred\n                    window.console.log(error);\n                },\n            },\n        ]);\n    };\n\n    /**\n     * Update Textarea\n     * @param {string} fieldtext Latest text from database\n     * @param {string} text Text to update\n     * @returns {string}\n     */\n    const getupdatedtext = (fieldtext, text) => {\n        let lang = config.lang;\n\n        // Search for {mlang} not found.\n        let mlangtext = `{mlang ${lang}}${text}{mlang}`;\n\n        // Return new mlang text if mlang has not been used before\n        if (fieldtext.indexOf(\"{mlang\") === -1) {\n            if (lang === \"other\") {\n                return mlangtext;\n            } else {\n                return (\n                    `{mlang other} ${fieldtext} {mlang}{mlang ${lang}} ${text} {mlang}`\n                );\n            }\n        }\n\n        // Use regex to replace the string\n        let pattern = `{*mlang +(${lang})}(.*?){*mlang*}`;\n        let replacex = new RegExp(pattern, \"dgis\");\n        let matches = fieldtext.match(replacex);\n\n        // Return the updated string\n        const updatedString = `{mlang ${lang}} ${text} {mlang}`;\n        if (matches) {\n            return fieldtext.replace(replacex, updatedString);\n        } else {\n            return fieldtext + updatedString;\n        }\n    };\n};\n\nconst onItemChecked = (e) => {\n    toggleStatus(e.target.getAttribute('data-key'), e.target.checked);\n};\nconst toggleStatus = (key, checked) => {\n    let s = 'wait';\n    if (checked) {\n        s = \"totranslate\";\n    }\n    document.querySelector(replaceKey(Selectors.actions.validatorIcon, key))\n        .setAttribute('data-status', `local-coursetranslator/${s}`);\n};\n\n\n/**\n * Shows/hides rows\n * @param {string} selector\n * @param {boolean} selected\n */\nconst showRows = (selector, selected) => {\n    let items = document.querySelectorAll(selector);\n    items.forEach((item) => {\n        let k = item.getAttribute('data-row-id');\n        toggleRowVisibility(item, selected);\n        // When a row is toggled then we don't want it to be selected and sent from translation.\n        item.querySelector(replaceKey(Selectors.editors.multiples.checkBoxesWithKey, k)).checked = false;\n        toggleStatus(k, false);\n    });\n    toggleAutotranslateButton();\n};\nconst toggleRowVisibility = (row, checked) => {\n    if (checked) {\n        row.classList.remove(\"d-none\");\n    } else {\n        row.classList.add(\"d-none\");\n    }\n};\n/**\n * Event listener to switch target lang\n * @param {Event} e\n */\nconst switchTarget = (e) => {\n    let url = new URL(window.location.href);\n    let searchParams = url.searchParams;\n    searchParams.set(\"target_lang\", e.target.value);\n    window.location = url.toString();\n};\n/**\n * Event listener to switch source lang\n * Hence reload the page and change the site main lang\n * @param {Event} e\n */\nconst switchSource = (e) => {\n    let url = new URL(window.location.href);\n    let searchParams = url.searchParams;\n    searchParams.set(\"lang\", e.target.value);\n    window.location = url.toString();\n};\n/**\n * Launch autotranslation\n */\nconst doAutotranslate = () => {\n    document\n        .querySelectorAll(Selectors.statuses.checkedCheckBoxes)\n        .forEach((ckBox) => {\n            let key = ckBox.getAttribute(\"data-key\");\n            getTranslation(key);\n        });\n};\n/**\n * @todo extract images ALT tags to send for translation\n * Send for Translation to DeepL\n * @param {Integer} key Translation Key\n */\nconst getTranslation = (key) => {\n    // Store the key in the dictionary\n    tempTranslations[key] = {};\n    // Get the editor\n    let editorSettings = findEditor(key);\n    if (config.debug > 0) {\n        window.console.log(editorSettings);\n    }\n    let editor = editorSettings.editor;\n    let editorType = editorSettings.editorType;\n\n    // Get the source text\n    let sourceText = document.querySelector(Selectors.sourcetexts.keys.replace(\"<KEY>\", key)).getAttribute(\"data-sourcetext-raw\");\n    let icon = document.querySelector(replaceKey(Selectors.actions.validatorIcon, key));\n    // Initialize global dictionary with this key's editor\n    tempTranslations[key] = {\n        'editorType': editorType,\n        'editor': editor,\n        'source': sourceText,\n        'translation': ''\n    };\n    // Build formData\n    let formData = new FormData();\n    formData.append(\"text\", sourceText);\n    formData.append(\"source_lang\", sourceLang.toUpperCase());\n    formData.append(\"target_lang\", targetLang.toUpperCase());\n    formData.append(\"auth_key\", config.apikey);\n    formData.append(\"tag_handling\", document.querySelector(Selectors.deepl.tagHandling).checked ? 'html' : 'xml');//\n    formData.append(\"context\", document.querySelector(Selectors.deepl.context).value ?? null); //\n    formData.append(\"split_sentences\", document.querySelector(Selectors.deepl.splitSentences).value);//\n    formData.append(\"preserve_formatting\", document.querySelector(Selectors.deepl.preserveFormatting).checked);//\n    formData.append(\"formality\", document.querySelector('[name=\"local-coursetranslator/formality\"]:checked').value);\n    formData.append(\"glossary_id\", document.querySelector(Selectors.deepl.glossaryId).value);//\n    formData.append(\"outline_detection\", document.querySelector(Selectors.deepl.outlineDetection).checked);//\n    formData.append(\"non_splitting_tags\", toJsonArray(document.querySelector(Selectors.deepl.nonSplittingTags).value));\n    formData.append(\"splitting_tags\", toJsonArray(document.querySelector(Selectors.deepl.splittingTags).value));\n    formData.append(\"ignore_tags\", toJsonArray(document.querySelector(Selectors.deepl.ignoreTags).value));\n    if (config.debug) {\n        window.console.log(\"Send deepl:\", formData);\n    }\n    // Update the translation\n    let xhr = new XMLHttpRequest();\n    xhr.onreadystatechange = () => {\n        if (xhr.readyState === XMLHttpRequest.DONE) {\n            const status = xhr.status;\n            if (status === 0 || (status >= 200 && status < 400)) {\n                // The request has been completed successfully\n                let data = JSON.parse(xhr.responseText);\n                // Display translation\n                editor.innerHTML = data.translations[0].text;\n                // Store the translation in the global object\n                tempTranslations[key].translation = data.translations[0].text;\n                icon.setAttribute('role', 'button');\n                icon.setAttribute('data-status', 'local-coursetranslator/tosave');\n                injectImageCss(editorSettings);\n            } else {\n                // Oh no! There has been an error with the request!\n                icon.setAttribute('data-status', 'local-coursetranslator/failed');\n                icon.setAttribute('role', 'status');\n            }\n        }\n    };\n    xhr.open(\"POST\", config.deeplurl);\n    xhr.send(formData);\n};\n/**\n * Inject css to highlight ALT text of image not loaded because of @@POLUGINFILE@@\n * @param {Integer} editorSettings\n * */\nconst injectImageCss = (editorSettings) => {\n    // Prepare css to inject in iframe editors\n    const css = document.createElement('style');\n    css.textContent = 'img{background-color:yellow !important;font-style: italic;}';\n    if (editorSettings.editorType === \"iframe\") {\n        let editorschildrens = Array.from(editorSettings.editor.parentElement.children);\n        let found = false;\n        for (let j in editorschildrens) {\n            let e = editorschildrens[j];\n            if (e.innerText === css.innerText) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            editorSettings.editor.parentElement.appendChild(css);\n        }\n    }\n};\n/**\n * Get the editor container based on recieved current user's\n * editor preference.\n * @param {Integer} key Translation Key\n */\nconst findEditor = (key) => {\n    let e = document.querySelector(Selectors.editors.types.basic\n        .replace(\"<KEY>\", key));\n    let et = 'basic';\n    if (e === null) {\n        switch (mainEditorType) {\n            case \"atto\" :\n                et = 'iframe';\n                e = document.querySelector(\n                    Selectors.editors.types.atto\n                        .replaceAll(\"<KEY>\", key));\n                break;\n            case \"tiny\":\n                et = 'iframe';\n                e = document.querySelector(Selectors.editors.types.tiny\n                    .replaceAll(\"<KEY>\", key))\n                    .contentWindow.tinymce;\n                break;\n            case 'marklar':\n            case \"textarea\" :\n                e = document.querySelector(Selectors.editors.types.other\n                    .replaceAll(\"<KEY>\", key));\n                break;\n        }\n    }\n    return {editor: e, editorType: et};\n};\n/**\n * Toggle checkboxes\n * @param {Event} e Event\n */\nconst toggleAllCheckboxes = (e) => {\n    // Check/uncheck checkboxes\n    if (e.target.checked) {\n        checkboxes.forEach((i) => {\n            // Toggle check box upon visibility\n            i.checked = !getParentRow(i).classList.contains('d-none');\n            toggleStatus(i.getAttribute('data-key'), i.checked);\n        });\n    } else {\n        checkboxes.forEach((i) => {\n            i.checked = false;\n            toggleStatus(i.getAttribute('data-key'), false);\n        });\n    }\n    toggleAutotranslateButton();\n};\nconst getParentRow = (node) => {\n    return node.closest(replaceKey(Selectors.sourcetexts.parentrow, node.getAttribute('data-key')));\n};\n/**\n * Toggle Autotranslate Button\n */\nconst toggleAutotranslateButton = () => {\n    autotranslateButton.disabled = true;\n    for (let i in checkboxes) {\n        let e = checkboxes[i];\n        if (e.checked) {\n            autotranslateButton.disabled = false;\n            break;\n        }\n    }\n};\n/**\n * Multilang button handler\n * @param {Event} e Event\n */\nconst onToggleMultilang = (e) => {\n    e.classList.toggle(\"showing\");\n    let keyid = e.getAttribute('aria-controls');\n    let key = keyidToKey(keyid);\n    let source = document.querySelector(replaceKey(Selectors.sourcetexts.keys, key));\n    let multilang = document.querySelector(replaceKey(Selectors.sourcetexts.multilangs, keyid));\n    source.classList.toggle(\"show\");\n    multilang.classList.toggle(\"show\");\n};\n/**\n * Json helper\n * @param {string} s\n * @param {string} sep\n * @returns {string}\n */\nconst toJsonArray = (s, sep = \",\") => {\n    return JSON.stringify(s.split(sep));\n};\n/**\n * Simple helper to manage selectors\n * @param {string} s\n * @param {string} k\n * @returns {*}\n */\nconst replaceKey = (s, k) => {\n    return s.replace(\"<KEY>\", k);\n};\n/**\n * Transforms a keyid to a key\n * @param {string} k\n * @returns {`${*}[${*}][${*}]`}\n */\nconst keyidToKey = (k) => {\n    let m = k.match(/^(.+)-(.+)-(.+)$/i);\n    return `${m[1]}[${m[2]}][${m[3]}]`;\n};\n/**\n * {mlang} searchex regex\n */\n/*\nconst searchex =\n  /{\\s*mlang\\s+((?:[a-z0-9_-]+)(?:\\s*,\\s*[a-z0-9_-]+\\s*)*)\\s*}(.*?){\\s*mlang\\s*}/dgis;\n*/\n/**\n * Search for mlang tags\n *\n * The code for this js parser was adapted from filter/multilang2\n * @todo store for future ref\n * @param {string} text Text with {mlang}\n * @returns {string}\n */\n/*\nconst mlangparser = (text) => {\n  // Search for {mlang} not found.\n  if (text.match(searchex) === null) {\n    return text;\n  }\n  // Replace callback for searchex results.\n  const replacecallback = (lang, match) => {\n    let blocklang = match.split(searchex)[1];\n    let blocktext = match.split(searchex)[2];\n    if (blocklang === lang) {\n      return blocktext;\n    } else {\n      return \"\";\n    }\n  };\n\n  // Get searchex results.\n  let result = text.replace(searchex, (match) => {\n    let lang = config.lang;\n    return replacecallback(lang, match);\n  });\n\n  // No results were found, return text in mlang other\n  if (result.length === 0) {\n    let mlangpattern = \"{mlang other}(.*?){mlang}\";\n    let mlangex = new RegExp(mlangpattern, \"dgis\");\n    let matches = text.match(mlangex);\n    if (matches[0].split(searchex)[2]) {\n      return matches[0].split(searchex)[2];\n    }\n  }\n\n  // Return the found string.\n  return result;\n};\n*/\n"],"names":["tempTranslations","mainEditorType","config","autotranslateButton","checkboxes","sourceLang","targetLang","cfg","debug","window","console","info","userPrefs","document","querySelector","Selectors","actions","autoTranslateBtn","querySelectorAll","checkBoxes","sourceSwitcher","value","targetSwitcher","e","error","message","registerUI","addEventListener","target","closest","switchTarget","switchSource","showUpdated","showRows","statuses","updated","checked","showNeedUpdate","needsupdate","onItemChecked","toggleMultilang","onToggleMultilang","currentlang","lang","undefined","create","title","body","show","removeOnClose","doAutotranslate","selectAllBtn","toggleAllCheckboxes","toggleAutotranslateButton","disabled","validatorsBtns","forEach","key","parentElement","dataset","keyValidator","log","saveTranslation","editor","innerHTML","autotranslate","text","icon","replaceKey","validatorIcon","selector","editors","multiples","editorsWithKey","replace","element","id","getAttribute","tid","table","field","fielddata","courseid","parseInt","call","methodname","args","data","done","fieldtext","length","textarea","textAreas","updatedtext","getupdatedtext","tdata","successMessage","classList","add","setAttribute","setTimeout","errorMessage","sourcetexts","keys","fail","mlangtext","indexOf","replacex","RegExp","updatedString","match","toggleStatus","s","selected","item","k","toggleRowVisibility","checkBoxesWithKey","row","remove","url","URL","location","href","searchParams","set","toString","checkedCheckBoxes","ckBox","getTranslation","editorSettings","findEditor","editorType","sourceText","formData","FormData","append","toUpperCase","apikey","deepl","tagHandling","context","splitSentences","preserveFormatting","glossaryId","outlineDetection","toJsonArray","nonSplittingTags","splittingTags","ignoreTags","xhr","XMLHttpRequest","onreadystatechange","readyState","DONE","status","JSON","parse","responseText","translations","translation","injectImageCss","open","deeplurl","send","css","createElement","textContent","editorschildrens","Array","from","children","found","j","innerText","appendChild","types","basic","et","atto","replaceAll","tiny","contentWindow","tinymce","other","i","getParentRow","contains","node","parentrow","toggle","keyid","keyidToKey","source","multilang","multilangs","sep","stringify","split","m"],"mappings":"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"}