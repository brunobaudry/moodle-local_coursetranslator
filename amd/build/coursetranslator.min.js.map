{"version":3,"file":"coursetranslator.min.js","sources":["../src/coursetranslator.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @module     local_coursetranslator/coursetranslator\n * @copyright  2022 Kaleb Heitzman <kaleb@jamfire.io>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n// import libs\nimport ajax from \"core/ajax\";\nimport Selectors from \"./selectors\";\nimport Modal from 'core/modal';\n// Initialize the temporary translations dictionary @todo make external class\nlet tempTranslations = {};\nlet editorType = '';\nlet config = {};\nlet autotranslateButton = {};\nlet checkboxes = [];\n\nconst registerEventListeners = ()=>{\n  document.addEventListener('change', e=>{\n    if (e.target.closest(Selectors.actions.targetSwitcher)) {\n      switchTarget(e);\n    }\n    if (e.target.closest(Selectors.actions.sourceSwitcher)) {\n      switchSource(e);\n    }\n    if (e.target.closest(Selectors.actions.showUpdated)) {\n      // showUpdated(e);\n      showRows(Selectors.statuses.updated, e.target.checked);\n    }\n    if (e.target.closest(Selectors.actions.showNeedUpdate)) {\n      //neededUpdate(e);\n      showRows(Selectors.statuses.needsupdate, e.target.checked);\n    }\n    if (e.target.closest(Selectors.actions.checkBoxes)) {\n        onItemChecked(e);\n    }\n  });\n  document.addEventListener('click', e=>{\n    if(e.target.closest(Selectors.actions.toggleMultilang)){\n      //window.console.info(e.target.id);\n      onToggleMultilang(e.target.closest(Selectors.actions.toggleMultilang));\n    }\n    if (e.target.closest(Selectors.actions.autoTranslateBtn)) {\n      if (config.currentlang == config.lang || config.lang == undefined) {\n        Modal.create({\n          title: 'Cannot call deepl',\n          body: `<p>Both languges are the same {$config.lang}</p>`,\n          show: true,\n          removeOnClose: true,\n        });\n      } else {\n        doAutotranslate(e);\n      }\n    }\n    if (e.target.closest(Selectors.actions.selecAllBtn)) {\n      toggleAllCheckboxes(e);\n    }\n  });\n};\nconst registerUI = ()=>{\n  autotranslateButton = document.querySelector(Selectors.actions.autoTranslateBtn);\n  checkboxes = document.querySelectorAll(Selectors.actions.checkBoxes);\n  window.console.log(Selectors.statuses.checkedCheckBoxes);\n};\n\n/**\n * Translation Editor UI\n * @param {Object} cfg JS Config\n */\nexport const init = (cfg) => {\n  config = cfg;\n  window.console.log(config);\n  editorType = config.userPrefs;\n\n  registerUI();\n  registerEventListeners();\n  /**\n   * Convert a template string into HTML DOM nodes\n   * @param  {String} string The template string\n   * @return {Node}       The template HTML\n   *\n  const stringToHTML = (string) => {\n    // See if DOMParser is supported\n    let parser;\n    const support = (() => {\n      if (!window.DOMParser) {\n        return false;\n      }\n      parser = new DOMParser();\n      try {\n        parser.parseFromString(\"x\", \"text/html\");\n      } catch (err) {\n        return false;\n      }\n      return true;\n    })();\n    // If DOMParser is supported, use it\n    if (support) {\n      parser = new DOMParser();\n      const doc = parser.parseFromString(string, \"text/html\");\n      return doc.body.childNodes;\n    }\n    // Otherwise, fallback to old-school method\n    const dom = document.createElement(\"div\");\n    dom.innerHTML = string;\n    return dom;\n  };\n   */\n\n  /**\n   * {mlang} searchex regex\n   */\n  const searchex =\n    /{\\s*mlang\\s+((?:[a-z0-9_-]+)(?:\\s*,\\s*[a-z0-9_-]+\\s*)*)\\s*}(.*?){\\s*mlang\\s*}/dgis;\n\n  /**\n   * Search for mlang tags\n   *\n   * The code for this js parser was adapted from filter/multilang2\n   *\n   * @param {string} text Text with {mlang}\n   * @returns {string}\n   */\n  const mlangparser = (text) => {\n    // Search for {mlang} not found.\n    if (text.match(searchex) === null) {\n      return text;\n    }\n    // Replace callback for searchex results.\n    const replacecallback = (lang, match) => {\n      let blocklang = match.split(searchex)[1];\n      let blocktext = match.split(searchex)[2];\n      if (blocklang === lang) {\n        return blocktext;\n      } else {\n        return \"\";\n      }\n    };\n\n    // Get searchex results.\n    let result = text.replace(searchex, (match) => {\n      let lang = config.lang;\n      return replacecallback(lang, match);\n    });\n\n    // No results were found, return text in mlang other\n    if (result.length === 0) {\n      let mlangpattern = \"{mlang other}(.*?){mlang}\";\n      let mlangex = new RegExp(mlangpattern, \"dgis\");\n      let matches = text.match(mlangex);\n      if (matches[0].split(searchex)[2]) {\n        return matches[0].split(searchex)[2];\n      }\n    }\n\n    // Return the found string.\n    return result;\n  };\n  const selectAllBtn = document.querySelector(Selectors.actions.selecAllBtn);\n  if (config.autotranslate) {\n    selectAllBtn.disabled = false;\n  }\n\n  /**\n   * Validaate translation ck\n   */\n  // const validators = document.querySelectorAll(\"[data-key-validator]\");\n  const validators = document.querySelectorAll(Selectors.actions.validatorsBtns);\n  validators.forEach((e)=>{\n    // Get the stored data and do the saving from editors content\n    e.addEventListener('click', (e)=> {\n      let key = e.target.parentElement.dataset.keyValidator;\n      // Window.console.log(key, \"save\");\n      if (tempTranslations[key] === null || tempTranslations[key] === undefined) {\n        /**\n         * @todo do a UI feedback (disable save )\n         */\n        window.console.log(`Transaltion key \"${key}\" is undefined `);\n      } else {\n        saveTranslation(\n            key,\n            tempTranslations[key].editor,\n            tempTranslations[key].editor.innerHTML\n        );\n      }\n\n    });\n  });\n\n  /**\n   * Autotranslate Checkboxes\n   */\n  /* const checkboxes = document.querySelectorAll(\n    \".local-coursetranslator__checkbox\"\n  );*/\n  // window.console.log(config, config.autotranslate, checkboxes);\n  if (config.autotranslate) {\n    checkboxes.forEach((e) => {\n      // Window.console.log(e);\n      e.disabled = false;\n    });\n  }\n  checkboxes.forEach((e) => {\n    e.addEventListener(\"change\", () => {\n      toggleAutotranslateButton();\n    });\n  });\n\n\n  /**\n   * Save Translation to Moodle\n   * @param  {String} key Data Key\n   * @param  {Node} editor HTML Editor Node\n   * @param  {String} text Updated Text\n   * @todo 3rd param is to refactor remove as it is the editors content\n   */\n  const saveTranslation = (key, editor, text) => {\n    window.console.log(key);\n    // Get processing vars\n    // let element = editor.closest(Selectors.editors.all);\n    let icon = document.querySelector(replaceKey(Selectors.actions.validatorIcon, key));\n    let selector = Selectors.editors.multiples.editorsWithKey.replace(\"<KEY>\", key);\n    window.console.log(selector);\n    window.console.log(document.querySelector(selector));\n    let element = document.querySelector(selector);\n    let id = element.getAttribute(\"data-id\");\n    let tid = element.getAttribute(\"data-tid\");\n    let table = element.getAttribute(\"data-table\");\n    let field = element.getAttribute(\"data-field\");\n\n    // Get the latest field data\n    let fielddata = {};\n    fielddata.courseid = config.courseid;\n    fielddata.id = parseInt(id);\n    fielddata.table = table;\n    fielddata.field = field;\n\n    // Get the latest data to parse text against.\n    ajax.call([\n      {\n        methodname: \"local_coursetranslator_get_field\",\n        args: {\n          data: [fielddata],\n        },\n        done: (data) => {\n          window.console.log(data);\n          // The latests field text so multiple translators can work at the same time\n          let fieldtext = data[0].text;\n\n          // Field text exists\n          if (data.length > 0) {\n            // Updated hidden textarea with updatedtext\n            let textarea = document.querySelector(\n                Selectors.editors.multiples.textAreas\n                    .replace(\"<KEY>\", key));\n            // Get the updated text\n            let updatedtext = getupdatedtext(fieldtext, text);\n\n            // Build the data object\n            let tdata = {};\n            tdata.courseid = config.courseid;\n            tdata.id = parseInt(id);\n            tdata.tid = tid;\n            tdata.table = table;\n            tdata.field = field;\n            tdata.text = updatedtext;\n            // Success Message\n            const successMessage = () => {\n              /** @todo cleanup comments*/\n              // editor.classList.add(\"local-coursetranslator__success\");\n              element.classList.add(\"local-coursetranslator__success\");\n              /* // Add saved indicator\n              let indicator =\n                `<div\n                   <!--class=\"local-coursetranslator__success-message\"-->\n                   data-status=\"local-coursetranslator/success-message\"\n                   data-key=\"${key}\"\n                 >${config.autosavedmsg}</div>`;\n              element.after(...stringToHTML(indicator));\n              */\n              icon.setAttribute('data-status', \"local-coursetranslator/success\");\n              /* Let status = document.querySelector(\n                  Selectors.statuses.keys\n                      .replace(\"<KEY>\", key));\n              status.classList.replace(\"badge-danger\", \"badge-success\");\n              status.innerHTML = config.uptodate;*/\n\n              // Remove success message after a few seconds\n              /* setTimeout(() => {\n                let indicatorNode = document.querySelector(\n                    Selectors.statuses.successMessages\n                        .replace(\"<KEY>\", key));\n                element.parentNode.removeChild(indicatorNode);\n              }, 3000);*/\n              setTimeout(()=>{\n icon.setAttribute('data-status', \"local-coursetranslator/saved\");\n});\n            };\n\n            // Error Mesage\n            const errorMessage = (error) => {\n              window.console.log(error);\n              editor.classList.add(\"local-coursetranslator__error\");\n              icon.setAttribute('data-status', \"local-coursetranslator/failed\");\n              if (error) {\n                textarea.innerHTML = error;\n              }\n            };\n\n            // Submit the request\n            ajax.call([\n              {\n                methodname: \"local_coursetranslator_update_translation\",\n                args: {\n                  data: [tdata],\n                },\n                done: (data) => {\n                  // Print response to console log\n                  if (config.debug > 0) {\n                    window.console.log(\"ws: \", key, data);\n                  }\n\n                  // Display success message\n                  if (data.length > 0) {\n                    successMessage();\n                    textarea.innerHTML = data[0].text;\n\n                    // Update source lang if necessary\n                    if (config.currentlang === config.lang) {\n                      document.querySelector(Selectors.sourcetexts.keys.replace('<KEY>', key))\n                          .innerHTML = text;\n                    }\n                  } else {\n                    // Something went wrong with the data\n                    errorMessage();\n                  }\n                },\n                fail: (error) => {\n                  // An error occurred\n                  errorMessage(error);\n                },\n              },\n            ]);\n          } else {\n            // Something went wrong with field retrieval\n            window.console.log(data);\n          }\n        },\n        fail: (error) => {\n          // An error occurred\n          window.console.log(error);\n        },\n      },\n    ]);\n  };\n\n  /**\n   * Update Textarea\n   * @param {string} fieldtext Latest text from database\n   * @param {string} text Text to update\n   * @returns {string}\n   */\n  const getupdatedtext = (fieldtext, text) => {\n    let lang = config.lang;\n\n    // Search for {mlang} not found.\n    let mlangtext = `{mlang ${lang}}${text}{mlang}`;\n\n    // Return new mlang text if mlang has not been used before\n    if (fieldtext.indexOf(\"{mlang\") === -1) {\n      if (lang === \"other\") {\n        return mlangtext;\n      } else {\n        return (\n          `{mlang other} ${fieldtext} {mlang}{mlang ${lang}} ${text} {mlang}`\n        );\n      }\n    }\n\n    // Use regex to replace the string\n    let pattern = `{*mlang +(${lang})}(.*?){*mlang*}`;\n    let replacex = new RegExp(pattern, \"dgis\");\n    let matches = fieldtext.match(replacex);\n\n    // Return the updated string\n    const updatedString = `{mlang ${lang}} ${text} {mlang}`;\n    if (matches) {\n      return fieldtext.replace(replacex, updatedString);\n    } else {\n      return fieldtext + updatedString;\n    }\n  };\n\n  /**\n   * Get the Translation using Moodle Web Service\n   * @returns void\n   */\n  window.addEventListener(\"load\", () => {\n    // Document.querySelectorAll('.local-coursetranslator__editor [contenteditable=\"true\"]')\n    document.querySelectorAll(Selectors.editors.contentEditable)\n      .forEach((editor) => {\n        // Save translation\n        editor.addEventListener(\"focusout\", () => {\n          return;\n          // Get Processing Information\n          let text = editor.innerHTML;\n          // Let element = editor.closest(\".local-coursetranslator__editor\");\n          let element = editor.closest(Selectors.editors.all);\n          let key = element.getAttribute(\"data-key\");\n\n          saveTranslation(key, editor, text);\n        });\n        // Remove status classes\n        editor.addEventListener(\"click\", () => {\n          editor.classList.remove(\"local-coursetranslator__success\");\n          editor.classList.remove(\"local-coursetranslator__error\");\n        });\n      });\n  });\n\n  /**\n   * Get text from processing areas and add them to contenteditables\n   */\n  window.addEventListener(\"load\", () => {\n    let textareas = document.querySelectorAll(Selectors.editors.textarea);\n    textareas.forEach((textarea) => {\n      // Get relevent keys and text\n      let key = textarea.getAttribute(\"data-key\");\n      let text = textarea.innerHTML;\n      /**\n       * @todo review selector\n       */\n      let editor = document.querySelector(\n          Selectors.editors.multiples.contentEditableKeys\n              .replace(\"<KEY>\", key));\n\n      let langpattern = `{mlang ${config.lang}}(.*?){mlang}`;\n      let langex = new RegExp(langpattern, \"dgis\");\n      let matches = text.match(langex);\n\n      // Parse the text for mlang\n      let parsedtext = mlangparser(text);\n\n      if (matches && matches.length === 1) {\n        // Updated contenteditables with parsedtext\n        editor.innerHTML = parsedtext;\n      } else if (matches && matches.length > 1) {\n        // Const dataKey = `data-key=\"${key}\"`;\n        document.querySelector(Selectors.editors.multiples.checkBoxesWithKey\n            .replace('<KEY>', key)).remove();\n        document.querySelector(Selectors.editors.multiples.editorChilds\n            .replace('<KEY>', key)).remove();\n        document.querySelector(Selectors.editors.multiples.textAreas\n            .replace('<KEY>', key)).remove();\n        let p = document.createElement(\"p\");\n        p.innerHTML = `<em><small>${config.multiplemlang}</small></em>`;\n        document.querySelector(Selectors.editors.multiples.editorsWithKey\n            .replace('<KEY>', key)).append(p);\n      } else {\n        editor.innerHTML = parsedtext;\n      }\n    });\n  });\n};\nconst onItemChecked = (e) => {\n  // If(e.target.checked)\n  //window.console.info(e.target.attributes['data-key'].value);\n  toggleStatus(e.target.getAttribute('data-key'), e.target.checked);\n  /*\n  let k = e.target.attributes['data-key'].value;\n  let statusItem = document.querySelector(replaceKey(Selectors.actions.validatorIcon, k));\n  window.console.info(statusItem);\n  if (e.target.checked) {\n    statusItem.setAttribute('data-status', \"local-coursetranslator/totranslate\");\n  } else {\n    statusItem.setAttribute('data-status', \"local-coursetranslator/wait\");\n  }\n  */\n\n};\nconst toggleStatus=(key, checked)=>{\n  let s = 'wait';\n  //let statusItem = document.querySelector(replaceKey(Selectors.actions.validatorIcon, key));\n  if (checked) {\n    s = \"totranslate\";\n  }\n  document.querySelector(replaceKey(Selectors.actions.validatorIcon, key))\n      .setAttribute('data-status',`local-coursetranslator/${s}`);\n};\n/**\n * Eventlistener for show update checkbox\n * @param {Event} e\n */\n/*\nconst showUpdated = (e) =>{\n  let items = document.querySelectorAll(Selectors.statuses.updated);\n  items.forEach((item) => {\n    toggleRowVisibility(item, e.target.checked);\n    toggleStatus(item.getAttribute('data-row-id'), e.target.checked);\n  });\n  // if (e.target.checked) {\n  //   items.forEach((item) => {\n  //     item.classList.remove(\"d-none\");\n  //   });\n  // } else {\n  //   items.forEach((item) => {\n  //     item.classList.add(\"d-none\");\n  //   });\n  // }\n};\n*/\n\n/**\n * Event listener to check if update are needed\n * @param {Event} e\n */\n/*const neededUpdate = (e)=> {\n    // Window.console.info(\"Need update toggled\");\n    // window.console.info(\"source_lang\", config.currentlang);\n    // window.console.info(\"target_lang\", config.lang);\n\n  let items = document.querySelectorAll(Selectors.statuses.needsupdate);\n  items.forEach((item) => {\n    toggleRowVisibility(item, e.target.checked);\n    toggleStatus(item.getAttribute('data-row-id'), e.target.checked);\n  });\n  // if (e.target.checked) {\n  //   items.forEach((item) => {\n  //     item.classList.remove(\"d-none\");\n  //   });\n  // } else {\n  //   items.forEach((item) => {\n  //     item.classList.add(\"d-none\");\n  //   });\n  // }\n};*/\nconst showRows=(selector, selected)=>{\n  window.console.log(selector, selected);\n  let items = document.querySelectorAll(selector);\n  items.forEach((item) => {\n    let k = item.getAttribute('data-row-id');\n    toggleRowVisibility(item, selected);\n    // when a row is toggled then we don't want it to be selected and sent from translation.\n    item.querySelector(replaceKey(Selectors.editors.multiples.checkBoxesWithKey,k)).checked = false;\n    toggleStatus(k, false);\n  });\n};\nconst toggleRowVisibility=(row, checked)=>{\n  if(checked){\n    row.classList.remove(\"d-none\");\n  }else{\n    row.classList.add(\"d-none\");\n  }\n};\n/**\n * Event listener to switch target lang\n * @param {Event} e\n */\nconst switchTarget = (e) => {\n  window.console.info('switchTarget');\n  let url = new URL(window.location.href);\n  let searchParams = url.searchParams;\n  searchParams.set(\"target_lang\", e.target.value);\n  let newUrl = url.toString();\n  window.location = newUrl;\n};\n/**\n * Event listener to switch source lang\n * Hence reload the page and change the site main lang\n * @param {Event} e\n */\nconst switchSource = (e) => {\n  window.console.info('switchSource');\n  let url = new URL(window.location.href);\n  let searchParams = url.searchParams;\n  searchParams.set(\"lang\", e.target.value);\n  let newUrl = url.toString();\n  window.location = newUrl;\n};\n\n/**\n * Launch autotranslation\n */\nconst doAutotranslate = () => {\n  document\n      // .querySelectorAll(\".local-coursetranslator__checkbox:checked\")\n      .querySelectorAll(Selectors.statuses.checkedCheckBoxes)\n      .forEach((ckBox) => {\n        let key = ckBox.getAttribute(\"data-key\");\n        getTranslation(key);\n      });\n};\n/**\n * @todo extract images ALT tags to send for translation\n * Send for Translation to DeepL\n * @param {Integer} key Translation Key\n */\nconst getTranslation = (key) => {\n  // Store the key in the dictionary\n  tempTranslations[key] = {};\n  // Get the editor\n  let editor = findEditor(key);\n  // Get the source text\n  let sourceText = document.querySelector(Selectors.sourcetexts.keys.replace(\"<KEY>\", key)).getAttribute(\"data-sourcetext-raw\");\n/*  Let sourceText = document.querySelector(Selectors.sourcetexts.keys.replace(\"<KEY>\",key))\n      .innerHTML;*/\n  // window.console.log(sourceText);\n  let icon = document.querySelector(replaceKey(Selectors.actions.validatorIcon, key));\n  // Initialize global dictionary with this key's editor\n\n  tempTranslations[key] = {\n    'editor': editor,\n    'source': sourceText,\n    'translation': ''\n  };\n  window.console.log(tempTranslations);\n  // Build formData\n  let formData = new FormData();\n  formData.append(\"text\", sourceText);\n  // FormData.append(\"source_lang\", \"en\");\n  formData.append(\"source_lang\", config.currentlang.toUpperCase());\n  formData.append(\"target_lang\", config.lang.toUpperCase());\n  formData.append(\"auth_key\", config.apikey);\n  formData.append(\"tag_handling\", document.querySelector(Selectors.deepl.tag_handling).checked ? 'html' : 'xml');//\n  formData.append(\"context\", document.querySelector(Selectors.deepl.context).value ?? null); //\n  formData.append(\"split_sentences\", document.querySelector(Selectors.deepl.split_sentences).value);//\n  formData.append(\"preserve_formatting\", document.querySelector(Selectors.deepl.preserve_formatting).checked);//\n  formData.append(\"formality\", document.querySelector('[name=\"local-coursetranslator/formality\"]:checked').value);\n  formData.append(\"glossary_id\", document.querySelector(Selectors.deepl.glossary_id).value);//\n  formData.append(\"outline_detection\", document.querySelector(Selectors.deepl.outline_detection).checked);//\n  formData.append(\"non_splitting_tags\", toJsonArray(document.querySelector(Selectors.deepl.non_splitting_tags).value));\n  formData.append(\"splitting_tags\", toJsonArray(document.querySelector(Selectors.deepl.splitting_tags).value));\n  formData.append(\"ignore_tags\", toJsonArray(document.querySelector(Selectors.deepl.ignore_tags).value));\n  // Window.console.log(config.currentlang);\n   window.console.log(\"Send deepl:\", formData);\n  // Update the translation\n  let xhr = new XMLHttpRequest();\n  xhr.onreadystatechange = () => {\n    if (xhr.readyState === XMLHttpRequest.DONE) {\n      const status = xhr.status;\n      if (status === 0 || (status >= 200 && status < 400)) {\n        // The request has been completed successfully\n        let data = JSON.parse(xhr.responseText);\n        window.console.log(\"deepl:\", key, data);\n        // Window.console.log(config.currentlang);\n        // window.console.log(editor);\n        // Display translation\n        editor.innerHTML = data.translations[0].text;\n        // Save translation\n        // saveTranslation(key, editor, data.translations[0].text);\n        // store the translation in the global object\n        tempTranslations[key].translation = data.translations[0].text;\n        icon.setAttribute('data-status', 'local-coursetranslator/tosave');\n      } else {\n        // Oh no! There has been an error with the request!\n        window.console.log(\"error\", status);\n        // Let icon=  document.querySelector(replaceKey(Selectors.actions.validatorIcon,key));\n        icon.setAttribute('data-status', 'local-coursetranslator/failed');\n      }\n    }\n  };\n   xhr.open(\"POST\", config.deeplurl);\n   xhr.send(formData);\n};\n/**\n * @todo URGENT something got broken with finding editor ...\n * Get the editor container based on recieved current user's\n * editor preference.\n * @param {Integer} key Translation Key\n */\nconst findEditor = (key) => {\n  // Let q = '';\n  // window.console.log(\"document.querySelector('\" + q + \"')\");\n  // window.console.log(\"editors pref : \" + editorType);\n  let e = document.querySelector(Selectors.editors.types.basic\n      .replace(\"<KEY>\", key));\n  if (e === null) {\n    switch (editorType) {\n      case \"atto\" :\n        e = document.querySelector(\n            Selectors.editors.types.atto\n                .replace(\"<KEY>\", key)); break;\n      case \"tiny\":\n        e = document.querySelector(Selectors.editors.types.tiny\n            .replace(\"<KEY>\", key))\n            .contentWindow.tinymce; break;\n      case 'marklar':\n      case \"textarea\" :\n        e = document.querySelector(Selectors.editors.types.other\n            .replace(\"<KEY>\", key)); break;\n    }\n  }\n  return e;\n};\n/**\n *\n * @param {Event} e Event\n */\nconst toggleAllCheckboxes = (e)=>{\n  // See if select all is checked\n  let checked = e.target.checked;\n\n  // Check/uncheck checkboxes\n  if (checked) {\n    checkboxes.forEach((i) => {\n      // toggle check box upon visibility\n      i.checked = !getParentRow(i).classList.contains('d-none');\n      toggleStatus(i.getAttribute('data-key'), i.checked);\n    });\n  } else {\n    checkboxes.forEach((i) => {\n      i.checked = false;\n      toggleStatus(i.getAttribute('data-key'), false);\n    });\n  }\n  toggleAutotranslateButton();\n};\nconst getParentRow = (node) =>{\n  return node.closest(replaceKey(Selectors.sourcetexts.parentrow, node.getAttribute('data-key')));\n};\n/**\n * Toggle Autotranslate Button\n */\nconst toggleAutotranslateButton = () => {\n  let checkboxItems = [];\n  checkboxes.forEach((e) => {\n    checkboxItems.push(e.checked);\n  });\n  let checked = checkboxItems.find((checked) => checked === true)\n      ? true\n      : false;\n  if (config.autotranslate && checked) {\n    autotranslateButton.disabled = false;\n  } else {\n    autotranslateButton.disabled = true;\n  }\n};\n/**\n *\n * @param {Event} e Event\n */\nconst onToggleMultilang = (e) =>{\n  window.console.log(e);\n  e.classList.toggle(\"showing\");\n  let keyid = e.getAttribute('aria-controls');\n  let key = keyidToKey(keyid);\n  window.console.log(e, key, keyid);\n  let source = document.querySelector(replaceKey(Selectors.sourcetexts.keys, key));\n  let multilang = document.querySelector(replaceKey(Selectors.sourcetexts.multilangs, keyid));\n  source.classList.toggle(\"show\");\n  multilang.classList.toggle(\"show\");\n};\n/**\n *\n * @param {string} s\n * @param {string} sep\n * @returns {string}\n */\nconst toJsonArray = (s, sep = \",\") => {\n  return JSON.stringify(s.split(sep));\n};\nconst replaceKey = (s, k)=>{\n  return s.replace(\"<KEY>\", k);\n};\n/*const regFrom = /^(.+)\\[(.+)\\]\\[(.+)\\]$/i;*/\nconst regTo = /^(.+)-(.+)-(.+)$/i;\n/*\nconst keyToKeyid=(k)=>{\n\n  let m = regFrom.match(k);\n  return `${m[1]}-${m[1]}-${m[1]}`;\n};\n\n */\nconst keyidToKey=(k)=>{\n  let m = k.match(regTo);\n  return `${m[1]}[${m[2]}][${m[3]}]`;\n};\n"],"names":["tempTranslations","editorType","config","autotranslateButton","checkboxes","cfg","window","console","log","userPrefs","document","querySelector","Selectors","actions","autoTranslateBtn","querySelectorAll","checkBoxes","statuses","checkedCheckBoxes","addEventListener","e","target","closest","targetSwitcher","switchTarget","sourceSwitcher","switchSource","showUpdated","showRows","updated","checked","showNeedUpdate","needsupdate","onItemChecked","toggleMultilang","onToggleMultilang","currentlang","lang","undefined","create","title","body","show","removeOnClose","doAutotranslate","selecAllBtn","toggleAllCheckboxes","searchex","mlangparser","text","match","result","replace","blocklang","split","blocktext","replacecallback","length","mlangex","RegExp","matches","selectAllBtn","autotranslate","disabled","validatorsBtns","forEach","key","parentElement","dataset","keyValidator","saveTranslation","editor","innerHTML","toggleAutotranslateButton","icon","replaceKey","validatorIcon","selector","editors","multiples","editorsWithKey","element","id","getAttribute","tid","table","field","fielddata","courseid","parseInt","call","methodname","args","data","done","fieldtext","textarea","textAreas","updatedtext","getupdatedtext","tdata","successMessage","classList","add","setAttribute","setTimeout","errorMessage","error","debug","sourcetexts","keys","fail","mlangtext","indexOf","replacex","updatedString","contentEditable","remove","contentEditableKeys","langpattern","langex","parsedtext","checkBoxesWithKey","editorChilds","p","createElement","multiplemlang","append","toggleStatus","s","selected","item","k","toggleRowVisibility","row","info","url","URL","location","href","searchParams","set","value","newUrl","toString","ckBox","getTranslation","findEditor","sourceText","formData","FormData","toUpperCase","apikey","deepl","tag_handling","context","split_sentences","preserve_formatting","glossary_id","outline_detection","toJsonArray","non_splitting_tags","splitting_tags","ignore_tags","xhr","XMLHttpRequest","onreadystatechange","readyState","DONE","status","JSON","parse","responseText","translations","translation","open","deeplurl","send","types","basic","atto","tiny","contentWindow","tinymce","other","i","getParentRow","contains","node","parentrow","checkboxItems","push","find","toggle","keyid","keyidToKey","source","multilang","multilangs","sep","stringify","regTo","m"],"mappings":"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"}