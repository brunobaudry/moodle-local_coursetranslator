{"version":3,"file":"coursetranslator.min.js","sources":["../src/coursetranslator.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @module     local_coursetranslator/coursetranslator\n * @copyright  2022 Kaleb Heitzman <kaleb@jamfire.io>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/**\n * @todo refactor query selectors to dat-* attributes as recommended by\n * https://moodledev.io/docs/guides/javascript#listen-to-a-dom-event\n */\n\n// import libs\nimport ajax from \"core/ajax\";\nimport Selectors from \"./selectors\";\n\n// Const Selectors = {\n//   actions :{\n//     localeSwitcher:'[data-action=\"local-coursetranslator/localeswitcher\"]'\n//   }\n// };\nlet tempTranslations = {};\nlet editorType = '';\nlet config = {};\nlet autotranslateButton = {};\nlet checkboxes = [];\nconst registerEventListeners = ()=>{\n  document.addEventListener('change', e=>{\n    if (e.target.closest(Selectors.actions.localeSwitcher)) {\n      switchLocale(e);\n    }\n    if (e.target.closest(Selectors.actions.showUpdated)) {\n      showUpdated(e);\n    }\n    if (e.target.closest(Selectors.actions.showNeedUpdate)) {\n      neededUpdate(e);\n    }\n  });\n  document.addEventListener('click', e=>{\n    if (e.target.closest(Selectors.actions.autoTranslateBtn)) {\n      doAutotranslate(e);\n    }\n    if (e.target.closest(Selectors.actions.selecAllBtn)) {\n      selectAll(e);\n    }\n  });\n};\nconst registerUI = ()=>{\n  autotranslateButton = document.querySelector(Selectors.actions.autoTranslateBtn);\n  checkboxes = document.querySelectorAll(Selectors.actions.checkBoxes);\n  window.console.log(Selectors.statuses.checkedCheckBoxes);\n};\n\n/**\n * Translation Editor UI\n * @param {Object} cfg JS Config\n */\nexport const init = (cfg) => {\n  config = cfg;\n  // Window.console.log(config.userPrefs);\n  editorType = config.userPrefs;\n  // Initialize the temporary translations dictionary @todo make external class\n  registerUI();\n  registerEventListeners();\n  /**\n   * Convert a template string into HTML DOM nodes\n   * @param  {String} string The template string\n   * @return {Node}       The template HTML\n   */\n  const stringToHTML = (string) => {\n    // See if DOMParser is supported\n    let parser;\n    const support = (() => {\n      if (!window.DOMParser) {\n        return false;\n      }\n      parser = new DOMParser();\n      try {\n        parser.parseFromString(\"x\", \"text/html\");\n      } catch (err) {\n        return false;\n      }\n      return true;\n    })();\n    // If DOMParser is supported, use it\n    if (support) {\n      parser = new DOMParser();\n      const doc = parser.parseFromString(string, \"text/html\");\n      return doc.body.childNodes;\n    }\n    // Otherwise, fallback to old-school method\n    const dom = document.createElement(\"div\");\n    dom.innerHTML = string;\n    return dom;\n  };\n\n  /**\n   * {mlang} searchex regex\n   */\n  const searchex =\n    /{\\s*mlang\\s+((?:[a-z0-9_-]+)(?:\\s*,\\s*[a-z0-9_-]+\\s*)*)\\s*}(.*?){\\s*mlang\\s*}/dgis;\n\n  /**\n   * Search for mlang tags\n   *\n   * The code for this js parser was adapted from filter/multilang2\n   *\n   * @param {string} text Text with {mlang}\n   * @returns {string}\n   */\n  const mlangparser = (text) => {\n    // Search for {mlang} not found.\n    if (text.match(searchex) === null) {\n      return text;\n    }\n    // Replace callback for searchex results.\n    const replacecallback = (lang, match) => {\n      let blocklang = match.split(searchex)[1];\n      let blocktext = match.split(searchex)[2];\n      if (blocklang === lang) {\n        return blocktext;\n      } else {\n        return \"\";\n      }\n    };\n\n    // Get searchex results.\n    let result = text.replace(searchex, (match) => {\n      let lang = config.lang;\n      return replacecallback(lang, match);\n    });\n\n    // No results were found, return text in mlang other\n    if (result.length === 0) {\n      let mlangpattern = \"{mlang other}(.*?){mlang}\";\n      let mlangex = new RegExp(mlangpattern, \"dgis\");\n      let matches = text.match(mlangex);\n      if (matches[0].split(searchex)[2]) {\n        return matches[0].split(searchex)[2];\n      }\n    }\n\n    // Return the found string.\n    return result;\n  };\n\n  /**\n   * Switch Translation Language\n   *\n  let localeSwitcher = document.querySelector(\n    \".local-coursetranslator__localeswitcher\"\n  );\n  localeSwitcher.addEventListener(\"change\", (e) => {\n    let url = new URL(window.location.href);\n    let searchParams = url.searchParams;\n    searchParams.set(\"course_lang\", e.target.value);\n    let newUrl = url.toString();\n    window.location = newUrl;\n  });\n   */\n\n  /**\n   * Show Updated Checkbox\n   *\n  let showUpdatedCheckbox = document.querySelector(\n    \".local-coursetranslator__show-updated\"\n  );\n  showUpdatedCheckbox.addEventListener(\"change\", (e) => {\n    let items = document.querySelectorAll('[data-status=\"updated\"]');\n    if (e.target.checked) {\n      items.forEach((item) => {\n        item.classList.remove(\"d-none\");\n      });\n    } else {\n      items.forEach((item) => {\n        item.classList.add(\"d-none\");\n      });\n    }\n  });\n   */\n\n  /**\n   * Show Update Needed Checkbox\n   *\n  let showUpdateNeededCheckbox = document.querySelector(\n    \".local-coursetranslator__show-needsupdate\"\n  );\n  showUpdateNeededCheckbox.addEventListener(\"change\", (e) => {\n    let items = document.querySelectorAll('[data-status=\"needsupdate\"]');\n    if (e.target.checked) {\n      items.forEach((item) => {\n        item.classList.remove(\"d-none\");\n      });\n    } else {\n      items.forEach((item) => {\n        item.classList.add(\"d-none\");\n      });\n    }\n  });\n   */\n  /**\n   * Select All Checkbox\n   *\n  const selectAll = document.querySelector(\n    \".local-coursetranslator__select-all\"\n  );\n   */\n  if (config.autotranslate) {\n    selectAll.disabled = false;\n  }\n  /**\n  SelectAll.addEventListener(\"click\", (e) => {\n    // // See if select all is checked\n    // let checked = e.target.checked;\n    // let checkboxes = document.querySelectorAll(\n    //   \".local-coursetranslator__checkbox\"\n    // );\n    //\n    // // Check/uncheck checkboxes\n    // if (checked) {\n    //   checkboxes.forEach((e) => {\n    //     e.checked = true;\n    //   });\n    // } else {\n    //   checkboxes.forEach((e) => {\n    //     e.checked = false;\n    //   });\n    // }\n    // toggleAutotranslateButton();\n\n  });\n   */\n  /**\n   * Validaate translation ck\n   */\n  // const validators = document.querySelectorAll(\"[data-key-validator]\");\n  const validators = document.querySelectorAll(Selectors.actions.validatorsBtns);\n  validators.forEach((e)=>{\n    // Get the stored data and do the saving from editors content\n    e.addEventListener('click', (e)=> {\n      let key = e.target.parentElement.dataset.keyValidator;\n      if (tempTranslations[key] === null || tempTranslations[key] === undefined) {\n        /**\n         * @todo do a UI feedback (disable save )\n         */\n        window.console.log(`Transaltion key \"${key}\" is undefined `);\n      } else {\n        saveTranslation(\n            key,\n            tempTranslations[key].editor,\n            tempTranslations[key].editor.innerHTML\n        );\n      }\n\n    });\n  });\n  /**\n  /**\n   * Autotranslate Checkboxes\n   */\n  /*const checkboxes = document.querySelectorAll(\n    \".local-coursetranslator__checkbox\"\n  );*/\n  window.console.log(config, config.autotranslate, checkboxes);\n  if (config.autotranslate) {\n    checkboxes.forEach((e) => {\n      window.console.log(e);\n      e.disabled = false;\n    });\n  }\n  checkboxes.forEach((e) => {\n    e.addEventListener(\"change\", () => {\n      toggleAutotranslateButton();\n    });\n  });\n\n  /**\n   * Autotranslate Button Display\n   * @returns void\n   *\n  const autotranslateButton = document.querySelector(\n    \".local-coursetranslator__autotranslate-btn\"\n  );\n   */\n\n\n  /**\n   * Autotranslate Button Click\n   * @returns void\n   *\n  autotranslateButton.addEventListener(\"click\", () => {\n    document\n      .querySelectorAll(\".local-coursetranslator__checkbox:checked\")\n      .forEach((e) => {\n        let key = e.getAttribute(\"data-key\");\n        getTranslation(key);\n      });\n\n  });\n   */\n\n\n  /**\n   * Save Translation to Moodle\n   * @param  {String} key Data Key\n   * @param  {Node} editor HTML Editor Node\n   * @param  {String} text Updated Text\n   * @todo 3rd param is to refactor remove as it is the editors content\n   */\n  const saveTranslation = (key, editor, text) => {\n    // Get processing vars\n    let element = editor.closest(\".local-coursetranslator__editor\");\n    let id = element.getAttribute(\"data-id\");\n    let tid = element.getAttribute(\"data-tid\");\n    let table = element.getAttribute(\"data-table\");\n    let field = element.getAttribute(\"data-field\");\n\n    // Get the latest field data\n    let fielddata = {};\n    fielddata.courseid = config.courseid;\n    fielddata.id = parseInt(id);\n    fielddata.table = table;\n    fielddata.field = field;\n\n    // Get the latest data to parse text against.\n    ajax.call([\n      {\n        methodname: \"local_coursetranslator_get_field\",\n        args: {\n          data: [fielddata],\n        },\n        done: (data) => {\n          // The latests field text so multiple translators can work at the same time\n          let fieldtext = data[0].text;\n\n          // Field text exists\n          if (data.length > 0) {\n            // Updated hidden textarea with updatedtext\n            let textarea = document.querySelector(\n              `.local-coursetranslator__textarea[data-key=\"${key}\"]`\n            );\n            // Get the updated text\n            let updatedtext = getupdatedtext(fieldtext, text);\n\n            // Build the data object\n            let tdata = {};\n            tdata.courseid = config.courseid;\n            tdata.id = parseInt(id);\n            tdata.tid = tid;\n            tdata.table = table;\n            tdata.field = field;\n            tdata.text = updatedtext;\n\n            // Success Message\n            const successMessage = () => {\n              editor.classList.add(\"local-coursetranslator__success\");\n              // Add saved indicator\n              let indicator =\n                `<div \n                   class=\"local-coursetranslator__success-message\" \n                   data-key=\"${key}\"\n                 >${config.autosavedmsg}</div>`;\n              editor.after(...stringToHTML(indicator));\n\n              let status = document.querySelector(\n                `[data-status-key=\"${key}\"`\n              );\n              status.classList.replace(\"badge-danger\", \"badge-success\");\n              status.innerHTML = config.uptodate;\n\n              // Remove success message after a few seconds\n              setTimeout(() => {\n                let indicatorNode = document.querySelector(\n                    `.local-coursetranslator__success-message[data-key=\"${key}\"]`\n                );\n                editor.parentNode.removeChild(indicatorNode);\n              }, 3000);\n            };\n\n            // Error Mesage\n            const errorMessage = (error) => {\n              window.console.log(error);\n              editor.classList.add(\"local-coursetranslator__error\");\n            };\n\n            // Submit the request\n            ajax.call([\n              {\n                methodname: \"local_coursetranslator_update_translation\",\n                args: {\n                  data: [tdata],\n                },\n                done: (data) => {\n                  // Print response to console log\n                  if (config.debug > 0) {\n                    window.console.log(\"ws: \", key, data);\n                  }\n\n                  // Display success message\n                  if (data.length > 0) {\n                    successMessage();\n                    textarea.innerHTML = data[0].text;\n\n                    // Update source lang if necessary\n                    if (config.currentlang === config.lang) {\n                      document.querySelector(\n                          `[data-sourcetext-key=\"${key}\"]`\n                      ).innerHTML = text;\n                    }\n                  } else {\n                    // Something went wrong with the data\n                    errorMessage();\n                  }\n                },\n                fail: (error) => {\n                  // An error occurred\n                  errorMessage(error);\n                },\n              },\n            ]);\n          } else {\n            // Something went wrong with field retrieval\n            window.console.log(data);\n          }\n        },\n        fail: (error) => {\n          // An error occurred\n          window.console.log(error);\n        },\n      },\n    ]);\n  };\n\n  /**\n   * Update Textarea\n   * @param {string} fieldtext Latest text from database\n   * @param {string} text Text to update\n   * @returns {string}\n   */\n  const getupdatedtext = (fieldtext, text) => {\n    let lang = config.lang;\n\n    // Search for {mlang} not found.\n    let mlangtext = `{mlang ${lang}}${text}{mlang}`;\n\n    // Return new mlang text if mlang has not been used before\n    if (fieldtext.indexOf(\"{mlang\") === -1) {\n      if (lang === \"other\") {\n        return mlangtext;\n      } else {\n        return (\n          `{mlang other} ${fieldtext} {mlang}{mlang ${lang}} ${text} {mlang}`\n        );\n      }\n    }\n\n    // Use regex to replace the string\n    let pattern = `{*mlang +(${lang})}(.*?){*mlang*}`;\n    let replacex = new RegExp(pattern, \"dgis\");\n    let matches = fieldtext.match(replacex);\n\n    // Return the updated string\n    const updatedString = `{mlang ${lang}} ${text} {mlang}`;\n    if (matches) {\n      return fieldtext.replace(replacex, updatedString);\n    } else {\n      return fieldtext + updatedString;\n    }\n  };\n\n  /**\n   * Get the Translation using Moodle Web Service\n   * @returns void\n   */\n  window.addEventListener(\"load\", () => {\n    // document.querySelectorAll('.local-coursetranslator__editor [contenteditable=\"true\"]')\n    document.querySelectorAll(Selectors.editors.contentEditable)\n      .forEach((editor) => {\n        // Save translation\n        editor.addEventListener(\"focusout\", () => {\n          // Get Processing Information\n          let text = editor.innerHTML;\n          // let element = editor.closest(\".local-coursetranslator__editor\");\n          let element = editor.closest(Selectors.editors.all);\n          let key = element.getAttribute(\"data-key\");\n\n          saveTranslation(key, editor, text);\n        });\n        // Remove status classes\n        editor.addEventListener(\"click\", () => {\n          editor.classList.remove(\"local-coursetranslator__success\");\n          editor.classList.remove(\"local-coursetranslator__error\");\n        });\n      });\n  });\n\n  /**\n   * Get text from processing areas and add them to contenteditables\n   */\n  window.addEventListener(\"load\", () => {\n    let textareas = document.querySelectorAll(Selectors.editors.textarea);\n    textareas.forEach((textarea) => {\n      // Get relevent keys and text\n      let key = textarea.getAttribute(\"data-key\");\n      let text = textarea.innerHTML;\n      /**\n       * @todo review selector\n       */\n      let editor = document.querySelector(\n          `[data-key=\"${key}\"] [contenteditable=\"true\"]`\n      );\n\n      let langpattern = `{mlang ${config.lang}}(.*?){mlang}`;\n      let langex = new RegExp(langpattern, \"dgis\");\n      let matches = text.match(langex);\n\n      // Parse the text for mlang\n      let parsedtext = mlangparser(text);\n\n      if (matches && matches.length === 1) {\n        // Updated contenteditables with parsedtext\n        editor.innerHTML = parsedtext;\n      } else if (matches && matches.length > 1) {\n        const dataKey = `data-key=\"${key}\"`;\n        document.querySelector(\n              `input[type=\"checkbox\"][${dataKey}]`)\n          .remove();\n        document.querySelector(\n              `.local-coursetranslator__editor[${dataKey}] > *`)\n          .remove();\n        document.querySelector(\n              `.local-coursetranslator__textarea[${dataKey}]`)\n          .remove();\n        let p = document.createElement(\"p\");\n        p.innerHTML = `<em><small>${config.multiplemlang}</small></em>`;\n        document.querySelector(\n              `.local-coursetranslator__editor[${dataKey}]`)\n          .append(p);\n      } else {\n        editor.innerHTML = parsedtext;\n      }\n    });\n  });\n};\n\n/**\n * Eventlistener for show update checkbox\n * @param {Event} e\n */\nconst showUpdated = (e) =>{\n  let items = document.querySelectorAll(Selectors.statuses.updated);\n  if (e.target.checked) {\n    items.forEach((item) => {\n      item.classList.remove(\"d-none\");\n    });\n  } else {\n    items.forEach((item) => {\n      item.classList.add(\"d-none\");\n    });\n  }\n};\n\n/**\n * Event listener to switch target lang\n * @param {Event} e\n */\nconst switchLocale = (e) => {\n  let url = new URL(window.location.href);\n  let searchParams = url.searchParams;\n  searchParams.set(\"course_lang\", e.target.value);\n  let newUrl = url.toString();\n  window.location = newUrl;\n};\n\n/**\n * Event listener to check if update are needed\n * @param {Event} e\n */\nconst neededUpdate = (e)=> {\n  let items = document.querySelectorAll(Selectors.statuses.needsupdate);\n  if (e.target.checked) {\n    items.forEach((item) => {\n      item.classList.remove(\"d-none\");\n    });\n  } else {\n    items.forEach((item) => {\n      item.classList.add(\"d-none\");\n    });\n  }\n};\n\n/**\n * Launch autotranslation\n */\nconst doAutotranslate = () => {\n  document\n      // .querySelectorAll(\".local-coursetranslator__checkbox:checked\")\n      .querySelectorAll(Selectors.statuses.checkedCheckBoxes)\n      .forEach((ckBox) => {\n        let key = ckBox.getAttribute(\"data-key\");\n        getTranslation(key);\n      });\n};\n/**\n * Send for Translation to DeepL\n * @param {Integer} key Translation Key\n */\nconst getTranslation = (key) => {\n  // Store the key in the dictionary\n  tempTranslations[key] = {};\n  // Get the editor\n  let editor = findEditor(key);\n\n  // Get the source text\n  let sourceText = document.querySelector(\n      `[data-sourcetext-key=\"${key}\"]`\n  ).innerHTML;\n  // Initialize global dictionary with this key's editor\n  tempTranslations[key] = {\n    'editor': editor,\n    'source': sourceText,\n    'translation': ''\n  };\n  // Build formData\n  let formData = new FormData();\n  formData.append(\"text\", sourceText);\n  // FormData.append(\"source_lang\", \"en\");\n  formData.append(\"source_lang\", config.currentlang);\n  formData.append(\"target_lang\", config.lang);\n  formData.append(\"preserve_formatting\", 1);\n  formData.append(\"auth_key\", config.apikey);\n  formData.append(\"tag_handling\", \"xml\");\n  formData.append(\"split_sentences\", \"nonewlines\");\n  // Window.console.log(config.currentlang);\n  // window.console.log(\"Send deepl:\", formData);\n  // Update the translation\n  let xhr = new XMLHttpRequest();\n  xhr.onreadystatechange = () => {\n    if (xhr.readyState === XMLHttpRequest.DONE) {\n      const status = xhr.status;\n      if (status === 0 || (status >= 200 && status < 400)) {\n        // The request has been completed successfully\n        let data = JSON.parse(xhr.responseText);\n        window.console.log(\"deepl:\", key, data);\n        // Window.console.log(config.currentlang);\n        // window.console.log(editor);\n        // Display translation\n        editor.innerHTML = data.translations[0].text;\n        // Save translation\n        // saveTranslation(key, editor, data.translations[0].text);\n        // store the translation in the global object\n        tempTranslations[key].translation = data.translations[0].text;\n      } else {\n        // Oh no! There has been an error with the request!\n        window.console.log(\"error\", status);\n      }\n    }\n  };\n  xhr.open(\"POST\", config.deeplurl);\n  xhr.send(formData);\n};\n/**\n * Get the editor container based on recieved current user's\n * editor preference.\n * @param {Integer} key Translation Key\n */\nconst findEditor = (key) => {\n  // Let q = '';\n  // window.console.log(\"document.querySelector('\" + q + \"')\");\n  // window.console.log(\"editors pref : \" + editorType);\n  let dataKey = `data-key=\"${key}\"`;\n  switch (editorType) {\n\n    case \"atto\" :\n      return document.querySelector(\n          `.local-coursetranslator__editor[${dataKey}] [contenteditable=\"true\"]`);\n    case \"tiny\":\n      return document.querySelector(\n          `.local-coursetranslator__editor[${dataKey}] iframe`)\n          .contentWindow.tinymce;\n    case 'marklar':\n    case \"textarea\" :\n      return document.querySelector(\n          `.local-coursetranslator__editor[${dataKey}] textarea[name=\"${key}[text]\"]`);\n  }\n};\n/**\n *\n * @param {Event} e\n */\nconst selectAll = (e)=>{\n  // See if select all is checked\n  let checked = e.target.checked;\n  /*checkboxes = document.querySelectorAll(\n      \".local-coursetranslator__checkbox\"\n  );\n  */\n\n\n  // Check/uncheck checkboxes\n  if (checked) {\n    checkboxes.forEach((e) => {\n      e.checked = true;\n    });\n  } else {\n    checkboxes.forEach((e) => {\n      e.checked = false;\n    });\n  }\n  toggleAutotranslateButton();\n};\n/**\n * Toggle Autotranslate Button\n */\nconst toggleAutotranslateButton = () => {\n  let checkboxItems = [];\n  checkboxes.forEach((e) => {\n    checkboxItems.push(e.checked);\n  });\n  let checked = checkboxItems.find((checked) => checked === true)\n      ? true\n      : false;\n  if (config.autotranslate && checked) {\n    autotranslateButton.disabled = false;\n  } else {\n    autotranslateButton.disabled = true;\n  }\n};\n"],"names":["tempTranslations","editorType","config","autotranslateButton","checkboxes","cfg","userPrefs","document","querySelector","Selectors","actions","autoTranslateBtn","querySelectorAll","checkBoxes","window","console","log","statuses","checkedCheckBoxes","addEventListener","e","target","closest","localeSwitcher","switchLocale","showUpdated","showNeedUpdate","neededUpdate","doAutotranslate","selecAllBtn","selectAll","searchex","mlangparser","text","match","result","replace","lang","blocklang","split","blocktext","replacecallback","length","mlangex","RegExp","matches","autotranslate","disabled","validatorsBtns","forEach","key","parentElement","dataset","keyValidator","undefined","saveTranslation","editor","innerHTML","toggleAutotranslateButton","element","id","getAttribute","tid","table","field","fielddata","courseid","parseInt","call","methodname","args","data","done","fieldtext","textarea","updatedtext","getupdatedtext","tdata","successMessage","classList","add","indicator","autosavedmsg","after","string","parser","DOMParser","parseFromString","err","body","childNodes","dom","createElement","stringToHTML","status","uptodate","setTimeout","indicatorNode","parentNode","removeChild","errorMessage","error","debug","currentlang","fail","mlangtext","indexOf","replacex","updatedString","editors","contentEditable","all","remove","langpattern","langex","parsedtext","dataKey","p","multiplemlang","append","items","updated","checked","item","url","URL","location","href","searchParams","set","value","newUrl","toString","needsupdate","ckBox","getTranslation","findEditor","sourceText","formData","FormData","apikey","xhr","XMLHttpRequest","onreadystatechange","readyState","DONE","JSON","parse","responseText","translations","translation","open","deeplurl","send","contentWindow","tinymce","checkboxItems","push","find"],"mappings":"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"}